#ifndef CUFFTDX_FFT_4_FP32_FWD_PTX_HPP
#define CUFFTDX_FFT_4_FP32_FWD_PTX_HPP



template<> __forceinline__ __device__ void cufftdx_private_function<22, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<33>;\n\t"
    ".reg .b64 rd<2>;\n\t"
    "add.f32 f17, %9, %14;\n\t"
    "add.f32 f18, %10, %16;\n\t"
    "sub.f32 f19, %9, %14;\n\t"
    "sub.f32 f20, %10, %16;\n\t"
    "add.f32 f21, %11, %17;\n\t"
    "add.f32 f22, %13, %18;\n\t"
    "sub.f32 f23, %11, %17;\n\t"
    "sub.f32 f24, %13, %18;\n\t"
    "add.f32 %1, f18, f22;\n\t"
    "add.f32 %0, f17, f21;\n\t"
    "sub.f32 %3, f20, f23;\n\t"
    "add.f32 %2, f19, f24;\n\t"
    "sub.f32 %5, f18, f22;\n\t"
    "sub.f32 %4, f17, f21;\n\t"
    "add.f32 %7, f20, f23;\n\t"
    "sub.f32 %6, f19, f24;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y), "=f"(rmem[2].x), "=f"(rmem[2].y), "=f"(rmem[3].x), "=f"(rmem[3].y): "l"(smem), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y), "f"(rmem[1].y), "f"(rmem[2].x), "f"(rmem[2].y), "f"(rmem[2].y), "f"(rmem[3].x), "f"(rmem[3].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<23, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<34>;\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .b64 rd<5>;\n\t"
    "mov.u32 r3, %tid.x;\n\t"
    "add.f32 f1, %6, %8;\n\t"
    "add.f32 f2, %7, %9;\n\t"
    "sub.f32 f13, %6, %8;\n\t"
    "sub.f32 f14, %7, %9;\n\t"
    "and.b32 r1, r3, 1;\n\t"
    "mul.wide.u32 rd2, r1, 8;\n\t"
    "mov.u64 rd3, %5;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f32 {f15, f16}, [rd4];\n\t"
    "mul.f32 f19, f15, f13;\n\t"
    "mul.f32 f20, f16, f14;\n\t"
    "sub.f32 f3, f19, f20;\n\t"
    "mul.f32 f21, f15, f14;\n\t"
    "fma.rn.f32 f4, f16, f13, f21;\n\t"
    "mov.u32 r4, %tid.y;\n\t"
    "shl.b32 r5, r4, 2;\n\t"
    "shl.b32 r6, r3, 1;\n\t"
    "and.b32 r7, r6, -4;\n\t"
    "add.s32 r2, r7, r5;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r8, r1, 1;\n\t"
    "add.s32 r9, r8, r2;\n\t"
    "shl.b32 r10, r9, 3;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %4;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r11, narrow1;\n\t"
    "}\n\t"
    "add.s32 r12, r11, r10;\n\t"
    "st.shared.v2.f32 [r12], {f1, f2};\n\t"
    "st.shared.v2.f32 [r12+8], {f3, f4};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r13, r1, r2;\n\t"
    "shl.b32 r14, r13, 3;\n\t"
    "add.s32 r16, r11, r14;\n\t"
    "ld.shared.v2.f32 {f22, f23}, [r16];\n\t"
    "ld.shared.v2.f32 {f26, f27}, [r16+16];\n\t"
    "add.f32 %1, f23, f27;\n\t"
    "add.f32 %0, f22, f26;\n\t"
    "sub.f32 %3, f23, f27;\n\t"
    "sub.f32 %2, f22, f26;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y): "l"(smem), "l"(lut_sp_2_4), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<24, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<30>;\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .b64 rd<5>;\n\t"
    "mov.u32 r5, %tid.x;\n\t"
    "add.f32 f1, %6, %8;\n\t"
    "add.f32 f2, %7, %9;\n\t"
    "sub.f32 f15, %6, %8;\n\t"
    "sub.f32 f16, %7, %9;\n\t"
    "and.b32 r1, r5, 1;\n\t"
    "mul.wide.u32 rd2, r1, 8;\n\t"
    "mov.u64 rd3, %5;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f32 {f17, f18}, [rd4];\n\t"
    "mul.f32 f21, f17, f15;\n\t"
    "mul.f32 f22, f18, f16;\n\t"
    "sub.f32 f3, f21, f22;\n\t"
    "mul.f32 f23, f17, f16;\n\t"
    "fma.rn.f32 f4, f18, f15, f23;\n\t"
    "mov.u32 r6, %tid.y;\n\t"
    "shl.b32 r7, r6, 2;\n\t"
    "shl.b32 r8, r5, 1;\n\t"
    "and.b32 r9, r8, -4;\n\t"
    "add.s32 r2, r9, r7;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r10, r1, 1;\n\t"
    "add.s32 r11, r10, r2;\n\t"
    "shl.b32 r12, r11, 2;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %4;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r13, narrow1;\n\t"
    "}\n\t"
    "add.s32 r3, r13, r12;\n\t"
    "st.shared.f32 [r3], f1;\n\t"
    "st.shared.f32 [r3+4], f3;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r14, r1, r2;\n\t"
    "shl.b32 r15, r14, 2;\n\t"
    "add.s32 r4, r13, r15;\n\t"
    "ld.shared.f32 f5, [r4];\n\t"
    "ld.shared.f32 f6, [r4+8];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f32 [r3], f2;\n\t"
    "st.shared.f32 [r3+4], f4;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f32 f24, [r4];\n\t"
    "ld.shared.f32 f25, [r4+8];\n\t"
    "add.f32 %0, f5, f6;\n\t"
    "add.f32 %1, f24, f25;\n\t"
    "sub.f32 %2, f5, f6;\n\t"
    "sub.f32 %3, f24, f25;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y): "l"(smem), "l"(lut_sp_2_4), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y));
};


#endif
