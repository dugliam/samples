#ifndef CUFFTDX_FFT_8_FP32_INV_PTX_HPP
#define CUFFTDX_FFT_8_FP32_INV_PTX_HPP



template<> __forceinline__ __device__ void cufftdx_private_function<233, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<90>;\n\t"
    ".reg .b64 rd<2>;\n\t"
    "add.f32 f33, %17, %27;\n\t"
    "add.f32 f34, %18, %29;\n\t"
    "sub.f32 f35, %17, %27;\n\t"
    "sub.f32 f36, %18, %29;\n\t"
    "add.f32 f37, %22, %33;\n\t"
    "add.f32 f38, %24, %34;\n\t"
    "sub.f32 f39, %22, %33;\n\t"
    "sub.f32 f40, %24, %34;\n\t"
    "add.f32 f41, f33, f37;\n\t"
    "add.f32 f42, f34, f38;\n\t"
    "sub.f32 f43, f33, f37;\n\t"
    "sub.f32 f44, f34, f38;\n\t"
    "sub.f32 f45, f35, f40;\n\t"
    "add.f32 f46, f36, f39;\n\t"
    "add.f32 f47, f35, f40;\n\t"
    "sub.f32 f48, f36, f39;\n\t"
    "add.f32 f49, %19, %30;\n\t"
    "add.f32 f50, %21, %32;\n\t"
    "sub.f32 f51, %19, %30;\n\t"
    "sub.f32 f52, %21, %32;\n\t"
    "add.f32 f53, %25, %35;\n\t"
    "add.f32 f54, %26, %36;\n\t"
    "sub.f32 f55, %25, %35;\n\t"
    "sub.f32 f56, %26, %36;\n\t"
    "add.f32 f57, f49, f53;\n\t"
    "add.f32 f58, f50, f54;\n\t"
    "sub.f32 f59, f49, f53;\n\t"
    "sub.f32 f60, f50, f54;\n\t"
    "sub.f32 f61, f51, f56;\n\t"
    "add.f32 f62, f52, f55;\n\t"
    "add.f32 f63, f51, f56;\n\t"
    "sub.f32 f64, f52, f55;\n\t"
    "mul.f32 f65, f61, 0f3F3504F3;\n\t"
    "mul.f32 f66, f62, 0f3F3504F3;\n\t"
    "sub.f32 f67, f65, f66;\n\t"
    "add.f32 f68, f65, f66;\n\t"
    "mul.f32 f69, f63, 0fBF3504F3;\n\t"
    "mul.f32 f70, f64, 0f3F3504F3;\n\t"
    "sub.f32 f71, f69, f70;\n\t"
    "mul.f32 f72, f64, 0fBF3504F3;\n\t"
    "fma.rn.f32 f73, f63, 0f3F3504F3, f72;\n\t"
    "add.f32 %1, f42, f58;\n\t"
    "add.f32 %0, f41, f57;\n\t"
    "add.f32 %3, f46, f68;\n\t"
    "add.f32 %2, f45, f67;\n\t"
    "add.f32 %5, f44, f59;\n\t"
    "sub.f32 %4, f43, f60;\n\t"
    "add.f32 %7, f48, f73;\n\t"
    "add.f32 %6, f47, f71;\n\t"
    "sub.f32 %9, f42, f58;\n\t"
    "sub.f32 %8, f41, f57;\n\t"
    "sub.f32 %11, f46, f68;\n\t"
    "sub.f32 %10, f45, f67;\n\t"
    "sub.f32 %13, f44, f59;\n\t"
    "add.f32 %12, f43, f60;\n\t"
    "sub.f32 %15, f48, f73;\n\t"
    "sub.f32 %14, f47, f71;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y), "=f"(rmem[2].x), "=f"(rmem[2].y), "=f"(rmem[3].x), "=f"(rmem[3].y), "=f"(rmem[4].x), "=f"(rmem[4].y), "=f"(rmem[5].x), "=f"(rmem[5].y), "=f"(rmem[6].x), "=f"(rmem[6].y), "=f"(rmem[7].x), "=f"(rmem[7].y): "l"(smem), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y), "f"(rmem[1].y), "f"(rmem[2].x), "f"(rmem[2].y), "f"(rmem[2].y), "f"(rmem[3].x), "f"(rmem[3].y), "f"(rmem[4].x), "f"(rmem[4].y), "f"(rmem[4].y), "f"(rmem[5].x), "f"(rmem[5].y), "f"(rmem[5].y), "f"(rmem[6].x), "f"(rmem[6].y), "f"(rmem[7].x), "f"(rmem[7].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<234, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<78>;\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .b64 rd<5>;\n\t"
    "mov.u32 r5, %tid.x;\n\t"
    "add.f32 f29, %10, %15;\n\t"
    "add.f32 f30, %11, %17;\n\t"
    "sub.f32 f31, %10, %15;\n\t"
    "sub.f32 f32, %11, %17;\n\t"
    "add.f32 f33, %12, %18;\n\t"
    "add.f32 f34, %14, %19;\n\t"
    "sub.f32 f35, %12, %18;\n\t"
    "sub.f32 f36, %14, %19;\n\t"
    "add.f32 f1, f29, f33;\n\t"
    "add.f32 f2, f30, f34;\n\t"
    "sub.f32 f37, f29, f33;\n\t"
    "sub.f32 f38, f30, f34;\n\t"
    "sub.f32 f39, f31, f36;\n\t"
    "add.f32 f40, f32, f35;\n\t"
    "add.f32 f41, f31, f36;\n\t"
    "sub.f32 f42, f32, f35;\n\t"
    "and.b32 r1, r5, 1;\n\t"
    "mul.wide.u32 rd2, r1, 8;\n\t"
    "mov.u64 rd3, %9;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f32 {f43, f44}, [rd4];\n\t"
    "mul.f32 f47, f40, f44;\n\t"
    "fma.rn.f32 f3, f43, f39, f47;\n\t"
    "mul.f32 f48, f39, f44;\n\t"
    "mul.f32 f49, f43, f40;\n\t"
    "sub.f32 f4, f49, f48;\n\t"
    "mul.f32 f50, f43, f43;\n\t"
    "mul.f32 f51, f44, f44;\n\t"
    "sub.f32 f52, f50, f51;\n\t"
    "mul.f32 f53, f44, f43;\n\t"
    "fma.rn.f32 f54, f44, f43, f53;\n\t"
    "mul.f32 f55, f38, f54;\n\t"
    "fma.rn.f32 f5, f52, f37, f55;\n\t"
    "mul.f32 f56, f37, f54;\n\t"
    "mul.f32 f57, f52, f38;\n\t"
    "sub.f32 f6, f57, f56;\n\t"
    "mul.f32 f58, f43, f52;\n\t"
    "mul.f32 f59, f44, f54;\n\t"
    "sub.f32 f60, f58, f59;\n\t"
    "mul.f32 f61, f43, f54;\n\t"
    "fma.rn.f32 f62, f44, f52, f61;\n\t"
    "mul.f32 f63, f42, f62;\n\t"
    "fma.rn.f32 f7, f60, f41, f63;\n\t"
    "mul.f32 f64, f41, f62;\n\t"
    "mul.f32 f65, f60, f42;\n\t"
    "sub.f32 f8, f65, f64;\n\t"
    "mov.u32 r6, %tid.y;\n\t"
    "shl.b32 r7, r6, 3;\n\t"
    "shl.b32 r8, r5, 2;\n\t"
    "and.b32 r9, r8, -8;\n\t"
    "add.s32 r2, r9, r7;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r10, r1, 2;\n\t"
    "add.s32 r11, r10, r2;\n\t"
    "shl.b32 r12, r11, 2;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %8;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r13, narrow1;\n\t"
    "}\n\t"
    "add.s32 r3, r13, r12;\n\t"
    "st.shared.f32 [r3], f1;\n\t"
    "st.shared.f32 [r3+4], f3;\n\t"
    "st.shared.f32 [r3+8], f5;\n\t"
    "st.shared.f32 [r3+12], f7;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r14, r1, r2;\n\t"
    "shl.b32 r15, r14, 2;\n\t"
    "add.s32 r4, r13, r15;\n\t"
    "ld.shared.f32 f9, [r4];\n\t"
    "ld.shared.f32 f10, [r4+8];\n\t"
    "ld.shared.f32 f11, [r4+16];\n\t"
    "ld.shared.f32 f12, [r4+24];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f32 [r3], f2;\n\t"
    "st.shared.f32 [r3+4], f4;\n\t"
    "st.shared.f32 [r3+8], f6;\n\t"
    "st.shared.f32 [r3+12], f8;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f32 f66, [r4];\n\t"
    "ld.shared.f32 f67, [r4+8];\n\t"
    "ld.shared.f32 f68, [r4+16];\n\t"
    "ld.shared.f32 f69, [r4+24];\n\t"
    "add.f32 %0, f9, f11;\n\t"
    "add.f32 %1, f66, f68;\n\t"
    "add.f32 %2, f10, f12;\n\t"
    "add.f32 %3, f67, f69;\n\t"
    "sub.f32 %4, f9, f11;\n\t"
    "sub.f32 %5, f66, f68;\n\t"
    "sub.f32 %6, f10, f12;\n\t"
    "sub.f32 %7, f67, f69;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y), "=f"(rmem[2].x), "=f"(rmem[2].y), "=f"(rmem[3].x), "=f"(rmem[3].y): "l"(smem), "l"(lut_sp_4_8), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y), "f"(rmem[1].y), "f"(rmem[2].x), "f"(rmem[2].y), "f"(rmem[2].y), "f"(rmem[3].x), "f"(rmem[3].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<235, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<86>;\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .b64 rd<5>;\n\t"
    "mov.u32 r3, %tid.x;\n\t"
    "add.f32 f25, %10, %15;\n\t"
    "add.f32 f26, %11, %17;\n\t"
    "sub.f32 f27, %10, %15;\n\t"
    "sub.f32 f28, %11, %17;\n\t"
    "add.f32 f29, %12, %18;\n\t"
    "add.f32 f30, %14, %19;\n\t"
    "sub.f32 f31, %12, %18;\n\t"
    "sub.f32 f32, %14, %19;\n\t"
    "add.f32 f1, f25, f29;\n\t"
    "add.f32 f2, f26, f30;\n\t"
    "sub.f32 f33, f25, f29;\n\t"
    "sub.f32 f34, f26, f30;\n\t"
    "sub.f32 f35, f27, f32;\n\t"
    "add.f32 f36, f28, f31;\n\t"
    "add.f32 f37, f27, f32;\n\t"
    "sub.f32 f38, f28, f31;\n\t"
    "and.b32 r1, r3, 1;\n\t"
    "mul.wide.u32 rd2, r1, 8;\n\t"
    "mov.u64 rd3, %9;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f32 {f39, f40}, [rd4];\n\t"
    "mul.f32 f43, f36, f40;\n\t"
    "fma.rn.f32 f3, f39, f35, f43;\n\t"
    "mul.f32 f44, f35, f40;\n\t"
    "mul.f32 f45, f39, f36;\n\t"
    "sub.f32 f4, f45, f44;\n\t"
    "mul.f32 f46, f39, f39;\n\t"
    "mul.f32 f47, f40, f40;\n\t"
    "sub.f32 f48, f46, f47;\n\t"
    "mul.f32 f49, f40, f39;\n\t"
    "fma.rn.f32 f50, f40, f39, f49;\n\t"
    "mul.f32 f51, f34, f50;\n\t"
    "fma.rn.f32 f5, f48, f33, f51;\n\t"
    "mul.f32 f52, f33, f50;\n\t"
    "mul.f32 f53, f48, f34;\n\t"
    "sub.f32 f6, f53, f52;\n\t"
    "mul.f32 f54, f39, f48;\n\t"
    "mul.f32 f55, f40, f50;\n\t"
    "sub.f32 f56, f54, f55;\n\t"
    "mul.f32 f57, f39, f50;\n\t"
    "fma.rn.f32 f58, f40, f48, f57;\n\t"
    "mul.f32 f59, f38, f58;\n\t"
    "fma.rn.f32 f7, f56, f37, f59;\n\t"
    "mul.f32 f60, f37, f58;\n\t"
    "mul.f32 f61, f56, f38;\n\t"
    "sub.f32 f8, f61, f60;\n\t"
    "mov.u32 r4, %tid.y;\n\t"
    "shl.b32 r5, r4, 3;\n\t"
    "shl.b32 r6, r3, 2;\n\t"
    "and.b32 r7, r6, -8;\n\t"
    "add.s32 r2, r7, r5;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r8, r1, 2;\n\t"
    "add.s32 r9, r8, r2;\n\t"
    "shl.b32 r10, r9, 3;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %8;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r11, narrow1;\n\t"
    "}\n\t"
    "add.s32 r12, r11, r10;\n\t"
    "st.shared.v2.f32 [r12], {f1, f2};\n\t"
    "st.shared.v2.f32 [r12+8], {f3, f4};\n\t"
    "st.shared.v2.f32 [r12+16], {f5, f6};\n\t"
    "st.shared.v2.f32 [r12+24], {f7, f8};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r13, r1, r2;\n\t"
    "shl.b32 r14, r13, 3;\n\t"
    "add.s32 r16, r11, r14;\n\t"
    "ld.shared.v2.f32 {f62, f63}, [r16];\n\t"
    "ld.shared.v2.f32 {f66, f67}, [r16+16];\n\t"
    "ld.shared.v2.f32 {f70, f71}, [r16+32];\n\t"
    "ld.shared.v2.f32 {f74, f75}, [r16+48];\n\t"
    "add.f32 %1, f63, f71;\n\t"
    "add.f32 %0, f62, f70;\n\t"
    "add.f32 %3, f67, f75;\n\t"
    "add.f32 %2, f66, f74;\n\t"
    "sub.f32 %5, f63, f71;\n\t"
    "sub.f32 %4, f62, f70;\n\t"
    "sub.f32 %7, f67, f75;\n\t"
    "sub.f32 %6, f66, f74;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y), "=f"(rmem[2].x), "=f"(rmem[2].y), "=f"(rmem[3].x), "=f"(rmem[3].y): "l"(smem), "l"(lut_sp_4_8), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y), "f"(rmem[1].y), "f"(rmem[2].x), "f"(rmem[2].y), "f"(rmem[2].y), "f"(rmem[3].x), "f"(rmem[3].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<236, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<55>;\n\t"
    ".reg .b32 r<30>;\n\t"
    ".reg .b64 rd<8>;\n\t"
    "mov.u32 r1, %tid.x;\n\t"
    "add.f32 f1, %7, %9;\n\t"
    "add.f32 f2, %8, %10;\n\t"
    "sub.f32 f17, %7, %9;\n\t"
    "sub.f32 f18, %8, %10;\n\t"
    "and.b32 r2, r1, 3;\n\t"
    "mul.wide.u32 rd2, r2, 8;\n\t"
    "mov.u64 rd3, %5;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f32 {f19, f20}, [rd4];\n\t"
    "mul.f32 f23, f18, f20;\n\t"
    "fma.rn.f32 f3, f19, f17, f23;\n\t"
    "mul.f32 f24, f17, f20;\n\t"
    "mul.f32 f25, f19, f18;\n\t"
    "sub.f32 f4, f25, f24;\n\t"
    "mov.u32 r6, %tid.y;\n\t"
    "shl.b32 r7, r6, 3;\n\t"
    "shl.b32 r8, r1, 1;\n\t"
    "and.b32 r9, r8, -8;\n\t"
    "add.s32 r3, r9, r7;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r10, r2, 1;\n\t"
    "add.s32 r11, r10, r3;\n\t"
    "shl.b32 r12, r11, 3;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %4;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r13, narrow1;\n\t"
    "}\n\t"
    "add.s32 r14, r13, r12;\n\t"
    "st.shared.v2.f32 [r14], {f1, f2};\n\t"
    "st.shared.v2.f32 [r14+8], {f3, f4};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r15, r2, r3;\n\t"
    "shl.b32 r16, r15, 3;\n\t"
    "add.s32 r18, r13, r16;\n\t"
    "ld.shared.v2.f32 {f26, f27}, [r18];\n\t"
    "ld.shared.v2.f32 {f30, f31}, [r18+32];\n\t"
    "add.f32 f5, f26, f30;\n\t"
    "add.f32 f6, f27, f31;\n\t"
    "sub.f32 f34, f26, f30;\n\t"
    "sub.f32 f35, f27, f31;\n\t"
    "and.b32 r4, r1, 2;\n\t"
    "bfe.u32 r19, r1, 1, 1;\n\t"
    "mul.wide.u32 rd5, r19, 8;\n\t"
    "mov.u64 rd6, %6;\n\t"
    "add.s64 rd7, rd6, rd5;\n\t"
    "ld.global.v2.f32 {f36, f37}, [rd7];\n\t"
    "mul.f32 f40, f35, f37;\n\t"
    "fma.rn.f32 f7, f36, f34, f40;\n\t"
    "mul.f32 f41, f34, f37;\n\t"
    "mul.f32 f42, f36, f35;\n\t"
    "sub.f32 f8, f42, f41;\n\t"
    "and.b32 r20, r1, 1;\n\t"
    "add.s32 r5, r3, r20;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r21, r4, 1;\n\t"
    "add.s32 r22, r21, r5;\n\t"
    "shl.b32 r23, r22, 3;\n\t"
    "add.s32 r25, r13, r23;\n\t"
    "st.shared.v2.f32 [r25], {f5, f6};\n\t"
    "st.shared.v2.f32 [r25+16], {f7, f8};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r26, r4, r5;\n\t"
    "shl.b32 r27, r26, 3;\n\t"
    "add.s32 r29, r13, r27;\n\t"
    "ld.shared.v2.f32 {f43, f44}, [r29];\n\t"
    "ld.shared.v2.f32 {f47, f48}, [r29+32];\n\t"
    "add.f32 %1, f44, f48;\n\t"
    "add.f32 %0, f43, f47;\n\t"
    "sub.f32 %3, f44, f48;\n\t"
    "sub.f32 %2, f43, f47;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y): "l"(smem), "l"(lut_sp_2_8), "l"(lut_sp_2_4), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<237, float, 1>(cufftdx::detail::complex<float> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f32 f<47>;\n\t"
    ".reg .b32 r<30>;\n\t"
    ".reg .b64 rd<8>;\n\t"
    "mov.u32 r1, %tid.x;\n\t"
    "add.f32 f1, %7, %9;\n\t"
    "add.f32 f2, %8, %10;\n\t"
    "sub.f32 f21, %7, %9;\n\t"
    "sub.f32 f22, %8, %10;\n\t"
    "and.b32 r2, r1, 3;\n\t"
    "mul.wide.u32 rd2, r2, 8;\n\t"
    "mov.u64 rd3, %5;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f32 {f23, f24}, [rd4];\n\t"
    "mul.f32 f27, f22, f24;\n\t"
    "fma.rn.f32 f3, f23, f21, f27;\n\t"
    "mul.f32 f28, f21, f24;\n\t"
    "mul.f32 f29, f23, f22;\n\t"
    "sub.f32 f4, f29, f28;\n\t"
    "mov.u32 r10, %tid.y;\n\t"
    "shl.b32 r11, r10, 3;\n\t"
    "shl.b32 r12, r1, 1;\n\t"
    "and.b32 r13, r12, -8;\n\t"
    "add.s32 r3, r13, r11;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r14, r2, 1;\n\t"
    "add.s32 r15, r14, r3;\n\t"
    "shl.b32 r16, r15, 2;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %4;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r17, narrow1;\n\t"
    "}\n\t"
    "add.s32 r4, r17, r16;\n\t"
    "st.shared.f32 [r4], f1;\n\t"
    "st.shared.f32 [r4+4], f3;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r18, r2, r3;\n\t"
    "shl.b32 r19, r18, 2;\n\t"
    "add.s32 r5, r17, r19;\n\t"
    "ld.shared.f32 f5, [r5];\n\t"
    "ld.shared.f32 f6, [r5+16];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f32 [r4], f2;\n\t"
    "st.shared.f32 [r4+4], f4;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f32 f30, [r5];\n\t"
    "ld.shared.f32 f31, [r5+16];\n\t"
    "add.f32 f7, f5, f6;\n\t"
    "add.f32 f8, f30, f31;\n\t"
    "sub.f32 f32, f5, f6;\n\t"
    "sub.f32 f33, f30, f31;\n\t"
    "and.b32 r6, r1, 2;\n\t"
    "bfe.u32 r21, r1, 1, 1;\n\t"
    "mul.wide.u32 rd5, r21, 8;\n\t"
    "mov.u64 rd6, %6;\n\t"
    "add.s64 rd7, rd6, rd5;\n\t"
    "ld.global.v2.f32 {f34, f35}, [rd7];\n\t"
    "mul.f32 f38, f33, f35;\n\t"
    "fma.rn.f32 f9, f34, f32, f38;\n\t"
    "mul.f32 f39, f32, f35;\n\t"
    "mul.f32 f40, f34, f33;\n\t"
    "sub.f32 f10, f40, f39;\n\t"
    "and.b32 r22, r1, 1;\n\t"
    "add.s32 r7, r3, r22;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r23, r6, 1;\n\t"
    "add.s32 r24, r23, r7;\n\t"
    "shl.b32 r25, r24, 2;\n\t"
    "add.s32 r8, r17, r25;\n\t"
    "st.shared.f32 [r8], f7;\n\t"
    "st.shared.f32 [r8+8], f9;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r27, r6, r7;\n\t"
    "shl.b32 r28, r27, 2;\n\t"
    "add.s32 r9, r17, r28;\n\t"
    "ld.shared.f32 f11, [r9];\n\t"
    "ld.shared.f32 f12, [r9+16];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f32 [r8], f8;\n\t"
    "st.shared.f32 [r8+8], f10;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f32 f41, [r9];\n\t"
    "ld.shared.f32 f42, [r9+16];\n\t"
    "add.f32 %0, f11, f12;\n\t"
    "add.f32 %1, f41, f42;\n\t"
    "sub.f32 %2, f11, f12;\n\t"
    "sub.f32 %3, f41, f42;\n\t"
    "}"
     : "=f"(rmem[0].x), "=f"(rmem[0].y), "=f"(rmem[1].x), "=f"(rmem[1].y): "l"(smem), "l"(lut_sp_2_8), "l"(lut_sp_2_4), "f"(rmem[0].x), "f"(rmem[0].y), "f"(rmem[1].x), "f"(rmem[1].y));
};


#endif
