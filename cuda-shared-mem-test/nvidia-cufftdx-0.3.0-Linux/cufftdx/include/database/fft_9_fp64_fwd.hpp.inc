#ifndef CUFFTDX_FFT_9_FP64_FWD_PTX_HPP
#define CUFFTDX_FFT_9_FP64_FWD_PTX_HPP



template<> __forceinline__ __device__ void cufftdx_private_function<520, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f64 fd<141>;\n\t"
    ".reg .b64 rd<2>;\n\t"
    "add.f64 fd37, %27, %35;\n\t"
    "add.f64 fd38, %19, fd37;\n\t"
    "add.f64 fd39, %28, %36;\n\t"
    "add.f64 fd40, %20, fd39;\n\t"
    "fma.rn.f64 fd41, fd37, 0dBFE0000000000000, %19;\n\t"
    "sub.f64 fd42, %28, %36;\n\t"
    "mul.f64 fd43, fd42, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 fd44, fd43, fd41;\n\t"
    "sub.f64 fd45, fd41, fd43;\n\t"
    "fma.rn.f64 fd46, fd39, 0dBFE0000000000000, %20;\n\t"
    "sub.f64 fd47, %27, %35;\n\t"
    "mul.f64 fd48, fd47, 0d3FEBB67AE8584CAA;\n\t"
    "sub.f64 fd49, fd46, fd48;\n\t"
    "add.f64 fd50, fd48, fd46;\n\t"
    "add.f64 fd51, %29, %37;\n\t"
    "add.f64 fd52, %21, fd51;\n\t"
    "add.f64 fd53, %31, %39;\n\t"
    "add.f64 fd54, %23, fd53;\n\t"
    "fma.rn.f64 fd55, fd51, 0dBFE0000000000000, %21;\n\t"
    "sub.f64 fd56, %31, %39;\n\t"
    "mul.f64 fd57, fd56, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 fd58, fd57, fd55;\n\t"
    "sub.f64 fd59, fd55, fd57;\n\t"
    "fma.rn.f64 fd60, fd53, 0dBFE0000000000000, %23;\n\t"
    "sub.f64 fd61, %29, %37;\n\t"
    "mul.f64 fd62, fd61, 0d3FEBB67AE8584CAA;\n\t"
    "sub.f64 fd63, fd60, fd62;\n\t"
    "add.f64 fd64, fd62, fd60;\n\t"
    "add.f64 fd65, %32, %40;\n\t"
    "add.f64 fd66, %24, fd65;\n\t"
    "add.f64 fd67, %34, %41;\n\t"
    "add.f64 fd68, %26, fd67;\n\t"
    "fma.rn.f64 fd69, fd65, 0dBFE0000000000000, %24;\n\t"
    "sub.f64 fd70, %34, %41;\n\t"
    "mul.f64 fd71, fd70, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 fd72, fd71, fd69;\n\t"
    "sub.f64 fd73, fd69, fd71;\n\t"
    "fma.rn.f64 fd74, fd67, 0dBFE0000000000000, %26;\n\t"
    "sub.f64 fd75, %32, %40;\n\t"
    "mul.f64 fd76, fd75, 0d3FEBB67AE8584CAA;\n\t"
    "sub.f64 fd77, fd74, fd76;\n\t"
    "add.f64 fd78, fd76, fd74;\n\t"
    "mul.f64 fd79, fd58, 0d3FE8836FA2CF5039;\n\t"
    "mul.f64 fd80, fd63, 0dBFE491B7523C161D;\n\t"
    "sub.f64 fd81, fd79, fd80;\n\t"
    "mul.f64 fd82, fd63, 0d3FE8836FA2CF5039;\n\t"
    "fma.rn.f64 fd83, fd58, 0dBFE491B7523C161D, fd82;\n\t"
    "mul.f64 fd84, fd72, 0d3FC63A1A7E0B738A;\n\t"
    "mul.f64 fd85, fd77, 0dBFEF838B8C811C17;\n\t"
    "sub.f64 fd86, fd84, fd85;\n\t"
    "mul.f64 fd87, fd77, 0d3FC63A1A7E0B738A;\n\t"
    "fma.rn.f64 fd88, fd72, 0dBFEF838B8C811C17, fd87;\n\t"
    "mul.f64 fd89, fd59, 0d3FC63A1A7E0B738A;\n\t"
    "mul.f64 fd90, fd64, 0dBFEF838B8C811C17;\n\t"
    "sub.f64 fd91, fd89, fd90;\n\t"
    "mul.f64 fd92, fd64, 0d3FC63A1A7E0B738A;\n\t"
    "fma.rn.f64 fd93, fd59, 0dBFEF838B8C811C17, fd92;\n\t"
    "mul.f64 fd94, fd73, 0dBFEE11F642522D1C;\n\t"
    "mul.f64 fd95, fd78, 0dBFD5E3A8748A0BF5;\n\t"
    "sub.f64 fd96, fd94, fd95;\n\t"
    "mul.f64 fd97, fd78, 0dBFEE11F642522D1C;\n\t"
    "fma.rn.f64 fd98, fd73, 0dBFD5E3A8748A0BF5, fd97;\n\t"
    "add.f64 fd99, fd52, fd66;\n\t"
    "add.f64 fd100, fd54, fd68;\n\t"
    "fma.rn.f64 fd101, fd99, 0dBFE0000000000000, fd38;\n\t"
    "sub.f64 fd102, fd54, fd68;\n\t"
    "mul.f64 fd103, fd102, 0d3FEBB67AE8584CAA;\n\t"
    "fma.rn.f64 fd104, fd100, 0dBFE0000000000000, fd40;\n\t"
    "sub.f64 fd105, fd52, fd66;\n\t"
    "mul.f64 fd106, fd105, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 fd107, fd81, fd86;\n\t"
    "add.f64 fd108, fd83, fd88;\n\t"
    "fma.rn.f64 fd109, fd107, 0dBFE0000000000000, fd44;\n\t"
    "sub.f64 fd110, fd83, fd88;\n\t"
    "mul.f64 fd111, fd110, 0d3FEBB67AE8584CAA;\n\t"
    "fma.rn.f64 fd112, fd108, 0dBFE0000000000000, fd49;\n\t"
    "sub.f64 fd113, fd81, fd86;\n\t"
    "mul.f64 fd114, fd113, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 fd115, fd91, fd96;\n\t"
    "add.f64 fd116, fd93, fd98;\n\t"
    "fma.rn.f64 fd117, fd115, 0dBFE0000000000000, fd45;\n\t"
    "sub.f64 fd118, fd93, fd98;\n\t"
    "mul.f64 fd119, fd118, 0d3FEBB67AE8584CAA;\n\t"
    "fma.rn.f64 fd120, fd116, 0dBFE0000000000000, fd50;\n\t"
    "sub.f64 fd121, fd91, fd96;\n\t"
    "mul.f64 fd122, fd121, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 %1, fd40, fd100;\n\t"
    "add.f64 %0, fd38, fd99;\n\t"
    "add.f64 %3, fd49, fd108;\n\t"
    "add.f64 %2, fd44, fd107;\n\t"
    "add.f64 %5, fd50, fd116;\n\t"
    "add.f64 %4, fd45, fd115;\n\t"
    "sub.f64 %7, fd104, fd106;\n\t"
    "add.f64 %6, fd103, fd101;\n\t"
    "sub.f64 %9, fd112, fd114;\n\t"
    "add.f64 %8, fd111, fd109;\n\t"
    "sub.f64 %11, fd120, fd122;\n\t"
    "add.f64 %10, fd119, fd117;\n\t"
    "add.f64 %13, fd106, fd104;\n\t"
    "sub.f64 %12, fd101, fd103;\n\t"
    "add.f64 %15, fd114, fd112;\n\t"
    "sub.f64 %14, fd109, fd111;\n\t"
    "add.f64 %17, fd122, fd120;\n\t"
    "sub.f64 %16, fd117, fd119;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y), "=d"(rmem[3].x), "=d"(rmem[3].y), "=d"(rmem[4].x), "=d"(rmem[4].y), "=d"(rmem[5].x), "=d"(rmem[5].y), "=d"(rmem[6].x), "=d"(rmem[6].y), "=d"(rmem[7].x), "=d"(rmem[7].y), "=d"(rmem[8].x), "=d"(rmem[8].y): "l"(smem), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y), "d"(rmem[2].y), "d"(rmem[3].x), "d"(rmem[3].y), "d"(rmem[4].x), "d"(rmem[4].y), "d"(rmem[4].y), "d"(rmem[5].x), "d"(rmem[5].y), "d"(rmem[5].y), "d"(rmem[6].x), "d"(rmem[6].y), "d"(rmem[7].x), "d"(rmem[7].y), "d"(rmem[7].y), "d"(rmem[8].x), "d"(rmem[8].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<521, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .f64 fd<65>;\n\t"
    ".reg .b64 rd<9>;\n\t"
    "mov.u32 r5, %tid.y;\n\t"
    "mov.u32 r6, %tid.x;\n\t"
    "add.f64 fd22, %10, %13;\n\t"
    "add.f64 fd1, %8, fd22;\n\t"
    "add.f64 fd23, %12, %14;\n\t"
    "add.f64 fd2, %9, fd23;\n\t"
    "fma.rn.f64 fd24, fd22, 0dBFE0000000000000, %8;\n\t"
    "sub.f64 fd25, %12, %14;\n\t"
    "mul.f64 fd26, fd25, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 fd27, fd26, fd24;\n\t"
    "sub.f64 fd28, fd24, fd26;\n\t"
    "fma.rn.f64 fd29, fd23, 0dBFE0000000000000, %9;\n\t"
    "sub.f64 fd30, %10, %13;\n\t"
    "mul.f64 fd31, fd30, 0d3FEBB67AE8584CAA;\n\t"
    "sub.f64 fd32, fd29, fd31;\n\t"
    "add.f64 fd33, fd31, fd29;\n\t"
    "mul.wide.u32 rd2, r6, -1431655765;\n\t"
    "shr.u64 rd3, rd2, 33;\n\t"
    "cvt.u32.u64 r7, rd3;\n\t"
    "mul.lo.s32 r8, r7, 3;\n\t"
    "sub.s32 r1, r6, r8;\n\t"
    "add.s32 r9, r7, r5;\n\t"
    "mul.lo.s32 r2, r9, 9;\n\t"
    "mul.wide.u32 rd4, r1, 16;\n\t"
    "mov.u64 rd5, %7;\n\t"
    "add.s64 rd6, rd5, rd4;\n\t"
    "ld.global.v2.f64 {fd34, fd35}, [rd6];\n\t"
    "add.s32 r10, r1, 3;\n\t"
    "mul.f64 fd38, fd34, fd27;\n\t"
    "mul.f64 fd39, fd35, fd32;\n\t"
    "sub.f64 fd3, fd38, fd39;\n\t"
    "mul.f64 fd40, fd34, fd32;\n\t"
    "fma.rn.f64 fd4, fd35, fd27, fd40;\n\t"
    "mul.wide.u32 rd7, r10, 16;\n\t"
    "add.s64 rd8, rd5, rd7;\n\t"
    "ld.global.v2.f64 {fd41, fd42}, [rd8];\n\t"
    "mul.f64 fd45, fd41, fd28;\n\t"
    "mul.f64 fd46, fd42, fd33;\n\t"
    "sub.f64 fd5, fd45, fd46;\n\t"
    "mul.f64 fd47, fd41, fd33;\n\t"
    "fma.rn.f64 fd6, fd42, fd28, fd47;\n\t"
    "barrier.sync 0;\n\t"
    "mad.lo.s32 r11, r1, 3, r2;\n\t"
    "shl.b32 r12, r11, 3;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %6;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r13, narrow1;\n\t"
    "}\n\t"
    "add.s32 r3, r13, r12;\n\t"
    "st.shared.f64 [r3], fd1;\n\t"
    "st.shared.f64 [r3+8], fd3;\n\t"
    "st.shared.f64 [r3+16], fd5;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r14, r1, r2;\n\t"
    "shl.b32 r15, r14, 3;\n\t"
    "add.s32 r4, r13, r15;\n\t"
    "ld.shared.f64 fd7, [r4];\n\t"
    "ld.shared.f64 fd8, [r4+24];\n\t"
    "ld.shared.f64 fd9, [r4+48];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f64 [r3], fd2;\n\t"
    "st.shared.f64 [r3+8], fd4;\n\t"
    "st.shared.f64 [r3+16], fd6;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f64 fd48, [r4];\n\t"
    "ld.shared.f64 fd49, [r4+24];\n\t"
    "ld.shared.f64 fd50, [r4+48];\n\t"
    "add.f64 fd51, fd8, fd9;\n\t"
    "add.f64 fd52, fd49, fd50;\n\t"
    "fma.rn.f64 fd53, fd51, 0dBFE0000000000000, fd7;\n\t"
    "sub.f64 fd54, fd49, fd50;\n\t"
    "mul.f64 fd55, fd54, 0d3FEBB67AE8584CAA;\n\t"
    "fma.rn.f64 fd56, fd52, 0dBFE0000000000000, fd48;\n\t"
    "sub.f64 fd57, fd8, fd9;\n\t"
    "mul.f64 fd58, fd57, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 %0, fd7, fd51;\n\t"
    "add.f64 %1, fd48, fd52;\n\t"
    "sub.f64 %3, fd56, fd58;\n\t"
    "add.f64 %2, fd55, fd53;\n\t"
    "add.f64 %5, fd58, fd56;\n\t"
    "sub.f64 %4, fd53, fd55;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y): "l"(smem), "l"(lut_dp_3_9), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<522, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .f64 fd<71>;\n\t"
    ".reg .b64 rd<9>;\n\t"
    "mov.u32 r3, %tid.y;\n\t"
    "mov.u32 r4, %tid.x;\n\t"
    "add.f64 fd19, %10, %13;\n\t"
    "add.f64 fd1, %8, fd19;\n\t"
    "add.f64 fd20, %12, %14;\n\t"
    "add.f64 fd2, %9, fd20;\n\t"
    "fma.rn.f64 fd21, fd19, 0dBFE0000000000000, %8;\n\t"
    "sub.f64 fd22, %12, %14;\n\t"
    "mul.f64 fd23, fd22, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 fd24, fd23, fd21;\n\t"
    "sub.f64 fd25, fd21, fd23;\n\t"
    "fma.rn.f64 fd26, fd20, 0dBFE0000000000000, %9;\n\t"
    "sub.f64 fd27, %10, %13;\n\t"
    "mul.f64 fd28, fd27, 0d3FEBB67AE8584CAA;\n\t"
    "sub.f64 fd29, fd26, fd28;\n\t"
    "add.f64 fd30, fd28, fd26;\n\t"
    "mul.wide.u32 rd2, r4, -1431655765;\n\t"
    "shr.u64 rd3, rd2, 33;\n\t"
    "cvt.u32.u64 r5, rd3;\n\t"
    "mul.lo.s32 r6, r5, 3;\n\t"
    "sub.s32 r1, r4, r6;\n\t"
    "add.s32 r7, r5, r3;\n\t"
    "mul.lo.s32 r2, r7, 9;\n\t"
    "mul.wide.u32 rd4, r1, 16;\n\t"
    "mov.u64 rd5, %7;\n\t"
    "add.s64 rd6, rd5, rd4;\n\t"
    "ld.global.v2.f64 {fd31, fd32}, [rd6];\n\t"
    "add.s32 r8, r1, 3;\n\t"
    "mul.f64 fd35, fd31, fd24;\n\t"
    "mul.f64 fd36, fd32, fd29;\n\t"
    "sub.f64 fd3, fd35, fd36;\n\t"
    "mul.f64 fd37, fd31, fd29;\n\t"
    "fma.rn.f64 fd4, fd32, fd24, fd37;\n\t"
    "mul.wide.u32 rd7, r8, 16;\n\t"
    "add.s64 rd8, rd5, rd7;\n\t"
    "ld.global.v2.f64 {fd38, fd39}, [rd8];\n\t"
    "mul.f64 fd42, fd38, fd25;\n\t"
    "mul.f64 fd43, fd39, fd30;\n\t"
    "sub.f64 fd5, fd42, fd43;\n\t"
    "mul.f64 fd44, fd38, fd30;\n\t"
    "fma.rn.f64 fd6, fd39, fd25, fd44;\n\t"
    "barrier.sync 0;\n\t"
    "mad.lo.s32 r9, r1, 3, r2;\n\t"
    "shl.b32 r10, r9, 4;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %6;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r11, narrow1;\n\t"
    "}\n\t"
    "add.s32 r12, r11, r10;\n\t"
    "st.shared.v2.f64 [r12], {fd1, fd2};\n\t"
    "st.shared.v2.f64 [r12+16], {fd3, fd4};\n\t"
    "st.shared.v2.f64 [r12+32], {fd5, fd6};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r13, r1, r2;\n\t"
    "shl.b32 r14, r13, 4;\n\t"
    "add.s32 r16, r11, r14;\n\t"
    "ld.shared.v2.f64 {fd45, fd46}, [r16];\n\t"
    "ld.shared.v2.f64 {fd49, fd50}, [r16+48];\n\t"
    "ld.shared.v2.f64 {fd53, fd54}, [r16+96];\n\t"
    "add.f64 fd57, fd49, fd53;\n\t"
    "add.f64 fd58, fd50, fd54;\n\t"
    "fma.rn.f64 fd59, fd57, 0dBFE0000000000000, fd45;\n\t"
    "sub.f64 fd60, fd50, fd54;\n\t"
    "mul.f64 fd61, fd60, 0d3FEBB67AE8584CAA;\n\t"
    "fma.rn.f64 fd62, fd58, 0dBFE0000000000000, fd46;\n\t"
    "sub.f64 fd63, fd49, fd53;\n\t"
    "mul.f64 fd64, fd63, 0d3FEBB67AE8584CAA;\n\t"
    "add.f64 %1, fd46, fd58;\n\t"
    "add.f64 %0, fd45, fd57;\n\t"
    "sub.f64 %3, fd62, fd64;\n\t"
    "add.f64 %2, fd61, fd59;\n\t"
    "add.f64 %5, fd64, fd62;\n\t"
    "sub.f64 %4, fd59, fd61;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y): "l"(smem), "l"(lut_dp_3_9), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y));
};


#endif
