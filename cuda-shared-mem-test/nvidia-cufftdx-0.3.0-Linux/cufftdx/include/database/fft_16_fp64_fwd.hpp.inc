#ifndef CUFFTDX_FFT_16_FP64_FWD_PTX_HPP
#define CUFFTDX_FFT_16_FP64_FWD_PTX_HPP



template<> __forceinline__ __device__ void cufftdx_private_function<446, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .f64 fd<240>;\n\t"
    ".reg .b64 rd<2>;\n\t"
    "add.f64 fd65, %33, %54;\n\t"
    "add.f64 fd66, %34, %56;\n\t"
    "sub.f64 fd67, %33, %54;\n\t"
    "sub.f64 fd68, %34, %56;\n\t"
    "add.f64 fd69, %43, %65;\n\t"
    "add.f64 fd70, %45, %66;\n\t"
    "sub.f64 fd71, %43, %65;\n\t"
    "sub.f64 fd72, %45, %66;\n\t"
    "add.f64 fd73, fd65, fd69;\n\t"
    "add.f64 fd74, fd66, fd70;\n\t"
    "sub.f64 fd75, fd65, fd69;\n\t"
    "sub.f64 fd76, fd66, fd70;\n\t"
    "add.f64 fd77, fd67, fd72;\n\t"
    "sub.f64 fd78, fd68, fd71;\n\t"
    "sub.f64 fd79, fd67, fd72;\n\t"
    "add.f64 fd80, fd68, fd71;\n\t"
    "add.f64 fd81, %38, %59;\n\t"
    "add.f64 fd82, %40, %61;\n\t"
    "sub.f64 fd83, %38, %59;\n\t"
    "sub.f64 fd84, %40, %61;\n\t"
    "add.f64 fd85, %49, %70;\n\t"
    "add.f64 fd86, %50, %72;\n\t"
    "sub.f64 fd87, %49, %70;\n\t"
    "sub.f64 fd88, %50, %72;\n\t"
    "add.f64 fd89, fd81, fd85;\n\t"
    "add.f64 fd90, fd82, fd86;\n\t"
    "sub.f64 fd91, fd81, fd85;\n\t"
    "sub.f64 fd92, fd82, fd86;\n\t"
    "add.f64 fd93, fd83, fd88;\n\t"
    "sub.f64 fd94, fd84, fd87;\n\t"
    "sub.f64 fd95, fd83, fd88;\n\t"
    "add.f64 fd96, fd84, fd87;\n\t"
    "mul.f64 fd97, fd93, 0d3FE6A09E667F3BCD;\n\t"
    "mul.f64 fd98, fd94, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd99, fd97, fd98;\n\t"
    "mul.f64 fd100, fd94, 0d3FE6A09E667F3BCD;\n\t"
    "fma.rn.f64 fd101, fd93, 0dBFE6A09E667F3BCD, fd100;\n\t"
    "mul.f64 fd102, fd95, 0dBFE6A09E667F3BCD;\n\t"
    "mul.f64 fd103, fd96, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd104, fd102, fd103;\n\t"
    "add.f64 fd105, fd102, fd103;\n\t"
    "add.f64 fd106, fd73, fd89;\n\t"
    "add.f64 fd107, fd74, fd90;\n\t"
    "sub.f64 fd108, fd73, fd89;\n\t"
    "sub.f64 fd109, fd74, fd90;\n\t"
    "add.f64 fd110, fd77, fd99;\n\t"
    "add.f64 fd111, fd78, fd101;\n\t"
    "sub.f64 fd112, fd77, fd99;\n\t"
    "sub.f64 fd113, fd78, fd101;\n\t"
    "add.f64 fd114, fd75, fd92;\n\t"
    "sub.f64 fd115, fd76, fd91;\n\t"
    "sub.f64 fd116, fd75, fd92;\n\t"
    "add.f64 fd117, fd76, fd91;\n\t"
    "add.f64 fd118, fd79, fd104;\n\t"
    "add.f64 fd119, fd80, fd105;\n\t"
    "sub.f64 fd120, fd79, fd104;\n\t"
    "sub.f64 fd121, fd80, fd105;\n\t"
    "add.f64 fd122, %35, %57;\n\t"
    "add.f64 fd123, %37, %58;\n\t"
    "sub.f64 fd124, %35, %57;\n\t"
    "sub.f64 fd125, %37, %58;\n\t"
    "add.f64 fd126, %46, %67;\n\t"
    "add.f64 fd127, %48, %69;\n\t"
    "sub.f64 fd128, %46, %67;\n\t"
    "sub.f64 fd129, %48, %69;\n\t"
    "add.f64 fd130, fd122, fd126;\n\t"
    "add.f64 fd131, fd123, fd127;\n\t"
    "sub.f64 fd132, fd122, fd126;\n\t"
    "sub.f64 fd133, fd123, fd127;\n\t"
    "add.f64 fd134, fd124, fd129;\n\t"
    "sub.f64 fd135, fd125, fd128;\n\t"
    "sub.f64 fd136, fd124, fd129;\n\t"
    "add.f64 fd137, fd125, fd128;\n\t"
    "add.f64 fd138, %41, %62;\n\t"
    "add.f64 fd139, %42, %64;\n\t"
    "sub.f64 fd140, %41, %62;\n\t"
    "sub.f64 fd141, %42, %64;\n\t"
    "add.f64 fd142, %51, %73;\n\t"
    "add.f64 fd143, %53, %74;\n\t"
    "sub.f64 fd144, %51, %73;\n\t"
    "sub.f64 fd145, %53, %74;\n\t"
    "add.f64 fd146, fd138, fd142;\n\t"
    "add.f64 fd147, fd139, fd143;\n\t"
    "sub.f64 fd148, fd138, fd142;\n\t"
    "sub.f64 fd149, fd139, fd143;\n\t"
    "add.f64 fd150, fd140, fd145;\n\t"
    "sub.f64 fd151, fd141, fd144;\n\t"
    "sub.f64 fd152, fd140, fd145;\n\t"
    "add.f64 fd153, fd141, fd144;\n\t"
    "mul.f64 fd154, fd150, 0d3FE6A09E667F3BCD;\n\t"
    "mul.f64 fd155, fd151, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd156, fd154, fd155;\n\t"
    "mul.f64 fd157, fd151, 0d3FE6A09E667F3BCD;\n\t"
    "fma.rn.f64 fd158, fd150, 0dBFE6A09E667F3BCD, fd157;\n\t"
    "mul.f64 fd159, fd152, 0dBFE6A09E667F3BCD;\n\t"
    "mul.f64 fd160, fd153, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd161, fd159, fd160;\n\t"
    "add.f64 fd162, fd159, fd160;\n\t"
    "add.f64 fd163, fd130, fd146;\n\t"
    "add.f64 fd164, fd131, fd147;\n\t"
    "sub.f64 fd165, fd130, fd146;\n\t"
    "sub.f64 fd166, fd131, fd147;\n\t"
    "add.f64 fd167, fd134, fd156;\n\t"
    "add.f64 fd168, fd135, fd158;\n\t"
    "sub.f64 fd169, fd134, fd156;\n\t"
    "sub.f64 fd170, fd135, fd158;\n\t"
    "add.f64 fd171, fd132, fd149;\n\t"
    "sub.f64 fd172, fd133, fd148;\n\t"
    "sub.f64 fd173, fd132, fd149;\n\t"
    "add.f64 fd174, fd133, fd148;\n\t"
    "add.f64 fd175, fd136, fd161;\n\t"
    "add.f64 fd176, fd137, fd162;\n\t"
    "sub.f64 fd177, fd136, fd161;\n\t"
    "sub.f64 fd178, fd137, fd162;\n\t"
    "mul.f64 fd179, fd167, 0d3FED906BCF328D46;\n\t"
    "mul.f64 fd180, fd168, 0dBFD87DE2A6AEA963;\n\t"
    "sub.f64 fd181, fd179, fd180;\n\t"
    "mul.f64 fd182, fd168, 0d3FED906BCF328D46;\n\t"
    "fma.rn.f64 fd183, fd167, 0dBFD87DE2A6AEA963, fd182;\n\t"
    "mul.f64 fd184, fd171, 0d3FE6A09E667F3BCD;\n\t"
    "mul.f64 fd185, fd172, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd186, fd184, fd185;\n\t"
    "mul.f64 fd187, fd172, 0d3FE6A09E667F3BCD;\n\t"
    "fma.rn.f64 fd188, fd171, 0dBFE6A09E667F3BCD, fd187;\n\t"
    "mul.f64 fd189, fd175, 0d3FD87DE2A6AEA963;\n\t"
    "mul.f64 fd190, fd176, 0dBFED906BCF328D46;\n\t"
    "sub.f64 fd191, fd189, fd190;\n\t"
    "mul.f64 fd192, fd176, 0d3FD87DE2A6AEA963;\n\t"
    "fma.rn.f64 fd193, fd175, 0dBFED906BCF328D46, fd192;\n\t"
    "mul.f64 fd194, fd169, 0dBFD87DE2A6AEA963;\n\t"
    "mul.f64 fd195, fd170, 0dBFED906BCF328D46;\n\t"
    "sub.f64 fd196, fd194, fd195;\n\t"
    "mul.f64 fd197, fd170, 0dBFD87DE2A6AEA963;\n\t"
    "fma.rn.f64 fd198, fd169, 0dBFED906BCF328D46, fd197;\n\t"
    "mul.f64 fd199, fd173, 0dBFE6A09E667F3BCD;\n\t"
    "mul.f64 fd200, fd174, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd201, fd199, fd200;\n\t"
    "add.f64 fd202, fd199, fd200;\n\t"
    "mul.f64 fd203, fd177, 0dBFED906BCF328D46;\n\t"
    "mul.f64 fd204, fd178, 0dBFD87DE2A6AEA963;\n\t"
    "sub.f64 fd205, fd203, fd204;\n\t"
    "mul.f64 fd206, fd178, 0dBFED906BCF328D46;\n\t"
    "fma.rn.f64 fd207, fd177, 0dBFD87DE2A6AEA963, fd206;\n\t"
    "add.f64 %1, fd107, fd164;\n\t"
    "add.f64 %0, fd106, fd163;\n\t"
    "add.f64 %3, fd111, fd183;\n\t"
    "add.f64 %2, fd110, fd181;\n\t"
    "add.f64 %5, fd115, fd188;\n\t"
    "add.f64 %4, fd114, fd186;\n\t"
    "add.f64 %7, fd119, fd193;\n\t"
    "add.f64 %6, fd118, fd191;\n\t"
    "sub.f64 %9, fd109, fd165;\n\t"
    "add.f64 %8, fd108, fd166;\n\t"
    "add.f64 %11, fd113, fd198;\n\t"
    "add.f64 %10, fd112, fd196;\n\t"
    "add.f64 %13, fd117, fd202;\n\t"
    "add.f64 %12, fd116, fd201;\n\t"
    "add.f64 %15, fd121, fd207;\n\t"
    "add.f64 %14, fd120, fd205;\n\t"
    "sub.f64 %17, fd107, fd164;\n\t"
    "sub.f64 %16, fd106, fd163;\n\t"
    "sub.f64 %19, fd111, fd183;\n\t"
    "sub.f64 %18, fd110, fd181;\n\t"
    "sub.f64 %21, fd115, fd188;\n\t"
    "sub.f64 %20, fd114, fd186;\n\t"
    "sub.f64 %23, fd119, fd193;\n\t"
    "sub.f64 %22, fd118, fd191;\n\t"
    "add.f64 %25, fd109, fd165;\n\t"
    "sub.f64 %24, fd108, fd166;\n\t"
    "sub.f64 %27, fd113, fd198;\n\t"
    "sub.f64 %26, fd112, fd196;\n\t"
    "sub.f64 %29, fd117, fd202;\n\t"
    "sub.f64 %28, fd116, fd201;\n\t"
    "sub.f64 %31, fd121, fd207;\n\t"
    "sub.f64 %30, fd120, fd205;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y), "=d"(rmem[3].x), "=d"(rmem[3].y), "=d"(rmem[4].x), "=d"(rmem[4].y), "=d"(rmem[5].x), "=d"(rmem[5].y), "=d"(rmem[6].x), "=d"(rmem[6].y), "=d"(rmem[7].x), "=d"(rmem[7].y), "=d"(rmem[8].x), "=d"(rmem[8].y), "=d"(rmem[9].x), "=d"(rmem[9].y), "=d"(rmem[10].x), "=d"(rmem[10].y), "=d"(rmem[11].x), "=d"(rmem[11].y), "=d"(rmem[12].x), "=d"(rmem[12].y), "=d"(rmem[13].x), "=d"(rmem[13].y), "=d"(rmem[14].x), "=d"(rmem[14].y), "=d"(rmem[15].x), "=d"(rmem[15].y): "l"(smem), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y), "d"(rmem[2].y), "d"(rmem[3].x), "d"(rmem[3].y), "d"(rmem[4].x), "d"(rmem[4].y), "d"(rmem[4].y), "d"(rmem[5].x), "d"(rmem[5].y), "d"(rmem[5].y), "d"(rmem[6].x), "d"(rmem[6].y), "d"(rmem[7].x), "d"(rmem[7].y), "d"(rmem[7].y), "d"(rmem[8].x), "d"(rmem[8].y), "d"(rmem[8].y), "d"(rmem[9].x), "d"(rmem[9].y), "d"(rmem[10].x), "d"(rmem[10].y), "d"(rmem[10].y), "d"(rmem[11].x), "d"(rmem[11].y), "d"(rmem[11].y), "d"(rmem[12].x), "d"(rmem[12].y), "d"(rmem[13].x), "d"(rmem[13].y), "d"(rmem[13].y), "d"(rmem[14].x), "d"(rmem[14].y), "d"(rmem[14].y), "d"(rmem[15].x), "d"(rmem[15].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<447, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .f64 fd<93>;\n\t"
    ".reg .b64 rd<5>;\n\t"
    "mov.u32 r3, %tid.x;\n\t"
    "add.f64 fd25, %10, %15;\n\t"
    "add.f64 fd26, %11, %17;\n\t"
    "sub.f64 fd27, %10, %15;\n\t"
    "sub.f64 fd28, %11, %17;\n\t"
    "add.f64 fd29, %12, %18;\n\t"
    "add.f64 fd30, %14, %19;\n\t"
    "sub.f64 fd31, %12, %18;\n\t"
    "sub.f64 fd32, %14, %19;\n\t"
    "add.f64 fd1, fd25, fd29;\n\t"
    "add.f64 fd2, fd26, fd30;\n\t"
    "sub.f64 fd33, fd25, fd29;\n\t"
    "sub.f64 fd34, fd26, fd30;\n\t"
    "add.f64 fd35, fd27, fd32;\n\t"
    "sub.f64 fd36, fd28, fd31;\n\t"
    "sub.f64 fd37, fd27, fd32;\n\t"
    "add.f64 fd38, fd28, fd31;\n\t"
    "and.b32 r1, r3, 3;\n\t"
    "mul.wide.u32 rd2, r1, 16;\n\t"
    "mov.u64 rd3, %9;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f64 {fd39, fd40}, [rd4];\n\t"
    "mul.f64 fd43, fd39, fd35;\n\t"
    "mul.f64 fd44, fd40, fd36;\n\t"
    "sub.f64 fd3, fd43, fd44;\n\t"
    "mul.f64 fd45, fd39, fd36;\n\t"
    "fma.rn.f64 fd4, fd40, fd35, fd45;\n\t"
    "mul.f64 fd46, fd39, fd39;\n\t"
    "mul.f64 fd47, fd40, fd40;\n\t"
    "sub.f64 fd48, fd46, fd47;\n\t"
    "mul.f64 fd49, fd40, fd39;\n\t"
    "fma.rn.f64 fd50, fd40, fd39, fd49;\n\t"
    "mul.f64 fd51, fd48, fd33;\n\t"
    "mul.f64 fd52, fd50, fd34;\n\t"
    "sub.f64 fd5, fd51, fd52;\n\t"
    "mul.f64 fd53, fd48, fd34;\n\t"
    "fma.rn.f64 fd6, fd50, fd33, fd53;\n\t"
    "ld.global.v2.f64 {fd54, fd55}, [rd4+64];\n\t"
    "mul.f64 fd58, fd54, fd37;\n\t"
    "mul.f64 fd59, fd55, fd38;\n\t"
    "sub.f64 fd7, fd58, fd59;\n\t"
    "mul.f64 fd60, fd54, fd38;\n\t"
    "fma.rn.f64 fd8, fd55, fd37, fd60;\n\t"
    "mov.u32 r4, %tid.y;\n\t"
    "shl.b32 r5, r4, 4;\n\t"
    "shl.b32 r6, r3, 2;\n\t"
    "and.b32 r7, r6, -16;\n\t"
    "add.s32 r2, r7, r5;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r8, r1, 2;\n\t"
    "add.s32 r9, r8, r2;\n\t"
    "shl.b32 r10, r9, 4;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %8;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r11, narrow1;\n\t"
    "}\n\t"
    "add.s32 r12, r11, r10;\n\t"
    "st.shared.v2.f64 [r12], {fd1, fd2};\n\t"
    "st.shared.v2.f64 [r12+16], {fd3, fd4};\n\t"
    "st.shared.v2.f64 [r12+32], {fd5, fd6};\n\t"
    "st.shared.v2.f64 [r12+48], {fd7, fd8};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r13, r1, r2;\n\t"
    "shl.b32 r14, r13, 4;\n\t"
    "add.s32 r16, r11, r14;\n\t"
    "ld.shared.v2.f64 {fd61, fd62}, [r16];\n\t"
    "ld.shared.v2.f64 {fd65, fd66}, [r16+64];\n\t"
    "ld.shared.v2.f64 {fd69, fd70}, [r16+128];\n\t"
    "ld.shared.v2.f64 {fd73, fd74}, [r16+192];\n\t"
    "add.f64 fd77, fd61, fd69;\n\t"
    "add.f64 fd78, fd62, fd70;\n\t"
    "sub.f64 fd79, fd61, fd69;\n\t"
    "sub.f64 fd80, fd62, fd70;\n\t"
    "add.f64 fd81, fd65, fd73;\n\t"
    "add.f64 fd82, fd66, fd74;\n\t"
    "sub.f64 fd83, fd65, fd73;\n\t"
    "sub.f64 fd84, fd66, fd74;\n\t"
    "add.f64 %1, fd78, fd82;\n\t"
    "add.f64 %0, fd77, fd81;\n\t"
    "sub.f64 %3, fd80, fd83;\n\t"
    "add.f64 %2, fd79, fd84;\n\t"
    "sub.f64 %5, fd78, fd82;\n\t"
    "sub.f64 %4, fd77, fd81;\n\t"
    "add.f64 %7, fd80, fd83;\n\t"
    "sub.f64 %6, fd79, fd84;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y), "=d"(rmem[3].x), "=d"(rmem[3].y): "l"(smem), "l"(lut_dp_4_16), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y), "d"(rmem[2].y), "d"(rmem[3].x), "d"(rmem[3].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<448, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .f64 fd<190>;\n\t"
    ".reg .b64 rd<6>;\n\t"
    "mov.u32 r5, %tid.y;\n\t"
    "shl.b32 r6, r5, 4;\n\t"
    "mov.u32 r7, %tid.x;\n\t"
    "add.f64 fd57, %18, %28;\n\t"
    "add.f64 fd58, %19, %30;\n\t"
    "sub.f64 fd59, %18, %28;\n\t"
    "sub.f64 fd60, %19, %30;\n\t"
    "add.f64 fd61, %23, %34;\n\t"
    "add.f64 fd62, %25, %35;\n\t"
    "sub.f64 fd63, %23, %34;\n\t"
    "sub.f64 fd64, %25, %35;\n\t"
    "add.f64 fd65, fd57, fd61;\n\t"
    "add.f64 fd66, fd58, fd62;\n\t"
    "sub.f64 fd67, fd57, fd61;\n\t"
    "sub.f64 fd68, fd58, fd62;\n\t"
    "add.f64 fd69, fd59, fd64;\n\t"
    "sub.f64 fd70, fd60, fd63;\n\t"
    "sub.f64 fd71, fd59, fd64;\n\t"
    "add.f64 fd72, fd60, fd63;\n\t"
    "add.f64 fd73, %20, %31;\n\t"
    "add.f64 fd74, %22, %33;\n\t"
    "sub.f64 fd75, %20, %31;\n\t"
    "sub.f64 fd76, %22, %33;\n\t"
    "add.f64 fd77, %26, %36;\n\t"
    "add.f64 fd78, %27, %37;\n\t"
    "sub.f64 fd79, %26, %36;\n\t"
    "sub.f64 fd80, %27, %37;\n\t"
    "add.f64 fd81, fd73, fd77;\n\t"
    "add.f64 fd82, fd74, fd78;\n\t"
    "sub.f64 fd83, fd73, fd77;\n\t"
    "sub.f64 fd84, fd74, fd78;\n\t"
    "add.f64 fd85, fd75, fd80;\n\t"
    "sub.f64 fd86, fd76, fd79;\n\t"
    "sub.f64 fd87, fd75, fd80;\n\t"
    "add.f64 fd88, fd76, fd79;\n\t"
    "mul.f64 fd89, fd85, 0d3FE6A09E667F3BCD;\n\t"
    "mul.f64 fd90, fd86, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd91, fd89, fd90;\n\t"
    "mul.f64 fd92, fd86, 0d3FE6A09E667F3BCD;\n\t"
    "fma.rn.f64 fd93, fd85, 0dBFE6A09E667F3BCD, fd92;\n\t"
    "mul.f64 fd94, fd87, 0dBFE6A09E667F3BCD;\n\t"
    "mul.f64 fd95, fd88, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd96, fd94, fd95;\n\t"
    "add.f64 fd97, fd94, fd95;\n\t"
    "add.f64 fd1, fd65, fd81;\n\t"
    "add.f64 fd2, fd66, fd82;\n\t"
    "sub.f64 fd98, fd65, fd81;\n\t"
    "sub.f64 fd99, fd66, fd82;\n\t"
    "add.f64 fd100, fd69, fd91;\n\t"
    "add.f64 fd101, fd70, fd93;\n\t"
    "sub.f64 fd102, fd69, fd91;\n\t"
    "sub.f64 fd103, fd70, fd93;\n\t"
    "add.f64 fd104, fd67, fd84;\n\t"
    "sub.f64 fd105, fd68, fd83;\n\t"
    "sub.f64 fd106, fd67, fd84;\n\t"
    "add.f64 fd107, fd68, fd83;\n\t"
    "add.f64 fd108, fd71, fd96;\n\t"
    "add.f64 fd109, fd72, fd97;\n\t"
    "sub.f64 fd110, fd71, fd96;\n\t"
    "sub.f64 fd111, fd72, fd97;\n\t"
    "and.b32 r1, r7, 1;\n\t"
    "mul.wide.u32 rd2, r1, 16;\n\t"
    "mov.u64 rd3, %17;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f64 {fd112, fd113}, [rd4];\n\t"
    "mul.f64 fd116, fd112, fd100;\n\t"
    "mul.f64 fd117, fd113, fd101;\n\t"
    "sub.f64 fd3, fd116, fd117;\n\t"
    "mul.f64 fd118, fd112, fd101;\n\t"
    "fma.rn.f64 fd4, fd113, fd100, fd118;\n\t"
    "mul.f64 fd119, fd112, fd112;\n\t"
    "mul.f64 fd120, fd113, fd113;\n\t"
    "sub.f64 fd121, fd119, fd120;\n\t"
    "mul.f64 fd122, fd113, fd112;\n\t"
    "fma.rn.f64 fd123, fd113, fd112, fd122;\n\t"
    "mul.f64 fd124, fd121, fd104;\n\t"
    "mul.f64 fd125, fd123, fd105;\n\t"
    "sub.f64 fd5, fd124, fd125;\n\t"
    "mul.f64 fd126, fd121, fd105;\n\t"
    "fma.rn.f64 fd6, fd123, fd104, fd126;\n\t"
    "mul.f64 fd127, fd112, fd121;\n\t"
    "mul.f64 fd128, fd113, fd123;\n\t"
    "sub.f64 fd129, fd127, fd128;\n\t"
    "mul.f64 fd130, fd112, fd123;\n\t"
    "fma.rn.f64 fd131, fd113, fd121, fd130;\n\t"
    "mul.f64 fd132, fd129, fd108;\n\t"
    "mul.f64 fd133, fd131, fd109;\n\t"
    "sub.f64 fd7, fd132, fd133;\n\t"
    "mul.f64 fd134, fd129, fd109;\n\t"
    "fma.rn.f64 fd8, fd131, fd108, fd134;\n\t"
    "mul.f64 fd135, fd112, fd129;\n\t"
    "mul.f64 fd136, fd113, fd131;\n\t"
    "sub.f64 fd137, fd135, fd136;\n\t"
    "mul.f64 fd138, fd112, fd131;\n\t"
    "fma.rn.f64 fd139, fd113, fd129, fd138;\n\t"
    "mul.f64 fd140, fd137, fd98;\n\t"
    "mul.f64 fd141, fd139, fd99;\n\t"
    "sub.f64 fd9, fd140, fd141;\n\t"
    "mul.f64 fd142, fd137, fd99;\n\t"
    "fma.rn.f64 fd10, fd139, fd98, fd142;\n\t"
    "ld.global.v2.f64 {fd143, fd144}, [rd4+32];\n\t"
    "mul.f64 fd147, fd143, fd102;\n\t"
    "mul.f64 fd148, fd144, fd103;\n\t"
    "sub.f64 fd11, fd147, fd148;\n\t"
    "mul.f64 fd149, fd143, fd103;\n\t"
    "fma.rn.f64 fd12, fd144, fd102, fd149;\n\t"
    "mul.f64 fd150, fd112, fd143;\n\t"
    "mul.f64 fd151, fd113, fd144;\n\t"
    "sub.f64 fd152, fd150, fd151;\n\t"
    "mul.f64 fd153, fd112, fd144;\n\t"
    "fma.rn.f64 fd154, fd113, fd143, fd153;\n\t"
    "mul.f64 fd155, fd152, fd106;\n\t"
    "mul.f64 fd156, fd154, fd107;\n\t"
    "sub.f64 fd13, fd155, fd156;\n\t"
    "mul.f64 fd157, fd152, fd107;\n\t"
    "fma.rn.f64 fd14, fd154, fd106, fd157;\n\t"
    "mul.f64 fd158, fd112, fd152;\n\t"
    "mul.f64 fd159, fd113, fd154;\n\t"
    "sub.f64 fd160, fd158, fd159;\n\t"
    "mul.f64 fd161, fd112, fd154;\n\t"
    "fma.rn.f64 fd162, fd113, fd152, fd161;\n\t"
    "mul.f64 fd163, fd160, fd110;\n\t"
    "mul.f64 fd164, fd162, fd111;\n\t"
    "sub.f64 fd15, fd163, fd164;\n\t"
    "mul.f64 fd165, fd160, fd111;\n\t"
    "fma.rn.f64 fd16, fd162, fd110, fd165;\n\t"
    "shl.b32 r8, r7, 3;\n\t"
    "and.b32 r9, r8, -16;\n\t"
    "add.s32 r2, r9, r6;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r10, r1, 3;\n\t"
    "add.s32 r11, r10, r2;\n\t"
    "shl.b32 r12, r11, 3;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %16;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r13, narrow1;\n\t"
    "}\n\t"
    "add.s32 r3, r13, r12;\n\t"
    "st.shared.f64 [r3], fd1;\n\t"
    "st.shared.f64 [r3+8], fd3;\n\t"
    "st.shared.f64 [r3+16], fd5;\n\t"
    "st.shared.f64 [r3+24], fd7;\n\t"
    "st.shared.f64 [r3+32], fd9;\n\t"
    "st.shared.f64 [r3+40], fd11;\n\t"
    "st.shared.f64 [r3+48], fd13;\n\t"
    "st.shared.f64 [r3+56], fd15;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r14, r1, r2;\n\t"
    "shl.b32 r15, r14, 3;\n\t"
    "add.s32 r4, r13, r15;\n\t"
    "ld.shared.f64 fd17, [r4];\n\t"
    "ld.shared.f64 fd18, [r4+16];\n\t"
    "ld.shared.f64 fd19, [r4+32];\n\t"
    "ld.shared.f64 fd20, [r4+48];\n\t"
    "ld.shared.f64 fd21, [r4+64];\n\t"
    "ld.shared.f64 fd22, [r4+80];\n\t"
    "ld.shared.f64 fd23, [r4+96];\n\t"
    "ld.shared.f64 fd24, [r4+112];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f64 [r3], fd2;\n\t"
    "st.shared.f64 [r3+8], fd4;\n\t"
    "st.shared.f64 [r3+16], fd6;\n\t"
    "st.shared.f64 [r3+24], fd8;\n\t"
    "st.shared.f64 [r3+32], fd10;\n\t"
    "st.shared.f64 [r3+40], fd12;\n\t"
    "st.shared.f64 [r3+48], fd14;\n\t"
    "st.shared.f64 [r3+56], fd16;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f64 fd166, [r4];\n\t"
    "ld.shared.f64 fd167, [r4+16];\n\t"
    "ld.shared.f64 fd168, [r4+32];\n\t"
    "ld.shared.f64 fd169, [r4+48];\n\t"
    "ld.shared.f64 fd170, [r4+64];\n\t"
    "ld.shared.f64 fd171, [r4+80];\n\t"
    "ld.shared.f64 fd172, [r4+96];\n\t"
    "ld.shared.f64 fd173, [r4+112];\n\t"
    "add.f64 %0, fd17, fd21;\n\t"
    "add.f64 %1, fd166, fd170;\n\t"
    "add.f64 %2, fd18, fd22;\n\t"
    "add.f64 %3, fd167, fd171;\n\t"
    "add.f64 %4, fd19, fd23;\n\t"
    "add.f64 %5, fd168, fd172;\n\t"
    "add.f64 %6, fd20, fd24;\n\t"
    "add.f64 %7, fd169, fd173;\n\t"
    "sub.f64 %8, fd17, fd21;\n\t"
    "sub.f64 %9, fd166, fd170;\n\t"
    "sub.f64 %10, fd18, fd22;\n\t"
    "sub.f64 %11, fd167, fd171;\n\t"
    "sub.f64 %12, fd19, fd23;\n\t"
    "sub.f64 %13, fd168, fd172;\n\t"
    "sub.f64 %14, fd20, fd24;\n\t"
    "sub.f64 %15, fd169, fd173;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y), "=d"(rmem[3].x), "=d"(rmem[3].y), "=d"(rmem[4].x), "=d"(rmem[4].y), "=d"(rmem[5].x), "=d"(rmem[5].y), "=d"(rmem[6].x), "=d"(rmem[6].y), "=d"(rmem[7].x), "=d"(rmem[7].y): "l"(smem), "l"(lut_dp_8_16), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y), "d"(rmem[2].y), "d"(rmem[3].x), "d"(rmem[3].y), "d"(rmem[4].x), "d"(rmem[4].y), "d"(rmem[4].y), "d"(rmem[5].x), "d"(rmem[5].y), "d"(rmem[5].y), "d"(rmem[6].x), "d"(rmem[6].y), "d"(rmem[7].x), "d"(rmem[7].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<449, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .f64 fd<85>;\n\t"
    ".reg .b64 rd<5>;\n\t"
    "mov.u32 r5, %tid.x;\n\t"
    "add.f64 fd29, %10, %15;\n\t"
    "add.f64 fd30, %11, %17;\n\t"
    "sub.f64 fd31, %10, %15;\n\t"
    "sub.f64 fd32, %11, %17;\n\t"
    "add.f64 fd33, %12, %18;\n\t"
    "add.f64 fd34, %14, %19;\n\t"
    "sub.f64 fd35, %12, %18;\n\t"
    "sub.f64 fd36, %14, %19;\n\t"
    "add.f64 fd1, fd29, fd33;\n\t"
    "add.f64 fd2, fd30, fd34;\n\t"
    "sub.f64 fd37, fd29, fd33;\n\t"
    "sub.f64 fd38, fd30, fd34;\n\t"
    "add.f64 fd39, fd31, fd36;\n\t"
    "sub.f64 fd40, fd32, fd35;\n\t"
    "sub.f64 fd41, fd31, fd36;\n\t"
    "add.f64 fd42, fd32, fd35;\n\t"
    "and.b32 r1, r5, 3;\n\t"
    "mul.wide.u32 rd2, r1, 16;\n\t"
    "mov.u64 rd3, %9;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f64 {fd43, fd44}, [rd4];\n\t"
    "mul.f64 fd47, fd43, fd39;\n\t"
    "mul.f64 fd48, fd44, fd40;\n\t"
    "sub.f64 fd3, fd47, fd48;\n\t"
    "mul.f64 fd49, fd43, fd40;\n\t"
    "fma.rn.f64 fd4, fd44, fd39, fd49;\n\t"
    "mul.f64 fd50, fd43, fd43;\n\t"
    "mul.f64 fd51, fd44, fd44;\n\t"
    "sub.f64 fd52, fd50, fd51;\n\t"
    "mul.f64 fd53, fd44, fd43;\n\t"
    "fma.rn.f64 fd54, fd44, fd43, fd53;\n\t"
    "mul.f64 fd55, fd52, fd37;\n\t"
    "mul.f64 fd56, fd54, fd38;\n\t"
    "sub.f64 fd5, fd55, fd56;\n\t"
    "mul.f64 fd57, fd52, fd38;\n\t"
    "fma.rn.f64 fd6, fd54, fd37, fd57;\n\t"
    "ld.global.v2.f64 {fd58, fd59}, [rd4+64];\n\t"
    "mul.f64 fd62, fd58, fd41;\n\t"
    "mul.f64 fd63, fd59, fd42;\n\t"
    "sub.f64 fd7, fd62, fd63;\n\t"
    "mul.f64 fd64, fd58, fd42;\n\t"
    "fma.rn.f64 fd8, fd59, fd41, fd64;\n\t"
    "mov.u32 r6, %tid.y;\n\t"
    "shl.b32 r7, r6, 4;\n\t"
    "shl.b32 r8, r5, 2;\n\t"
    "and.b32 r9, r8, -16;\n\t"
    "add.s32 r2, r9, r7;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r10, r1, 2;\n\t"
    "add.s32 r11, r10, r2;\n\t"
    "shl.b32 r12, r11, 3;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %8;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r13, narrow1;\n\t"
    "}\n\t"
    "add.s32 r3, r13, r12;\n\t"
    "st.shared.f64 [r3], fd1;\n\t"
    "st.shared.f64 [r3+8], fd3;\n\t"
    "st.shared.f64 [r3+16], fd5;\n\t"
    "st.shared.f64 [r3+24], fd7;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r14, r1, r2;\n\t"
    "shl.b32 r15, r14, 3;\n\t"
    "add.s32 r4, r13, r15;\n\t"
    "ld.shared.f64 fd9, [r4];\n\t"
    "ld.shared.f64 fd10, [r4+32];\n\t"
    "ld.shared.f64 fd11, [r4+64];\n\t"
    "ld.shared.f64 fd12, [r4+96];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f64 [r3], fd2;\n\t"
    "st.shared.f64 [r3+8], fd4;\n\t"
    "st.shared.f64 [r3+16], fd6;\n\t"
    "st.shared.f64 [r3+24], fd8;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f64 fd65, [r4];\n\t"
    "ld.shared.f64 fd66, [r4+32];\n\t"
    "ld.shared.f64 fd67, [r4+64];\n\t"
    "ld.shared.f64 fd68, [r4+96];\n\t"
    "add.f64 fd69, fd9, fd11;\n\t"
    "add.f64 fd70, fd65, fd67;\n\t"
    "sub.f64 fd71, fd9, fd11;\n\t"
    "sub.f64 fd72, fd65, fd67;\n\t"
    "add.f64 fd73, fd10, fd12;\n\t"
    "add.f64 fd74, fd66, fd68;\n\t"
    "sub.f64 fd75, fd10, fd12;\n\t"
    "sub.f64 fd76, fd66, fd68;\n\t"
    "add.f64 %0, fd69, fd73;\n\t"
    "add.f64 %1, fd70, fd74;\n\t"
    "sub.f64 %3, fd72, fd75;\n\t"
    "add.f64 %2, fd71, fd76;\n\t"
    "sub.f64 %4, fd69, fd73;\n\t"
    "sub.f64 %5, fd70, fd74;\n\t"
    "add.f64 %7, fd72, fd75;\n\t"
    "sub.f64 %6, fd71, fd76;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y), "=d"(rmem[3].x), "=d"(rmem[3].y): "l"(smem), "l"(lut_dp_4_16), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y), "d"(rmem[2].y), "d"(rmem[3].x), "d"(rmem[3].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<450, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<43>;\n\t"
    ".reg .f64 fd<76>;\n\t"
    ".reg .b64 rd<11>;\n\t"
    "mov.u32 r1, %tid.x;\n\t"
    "add.f64 fd1, %8, %10;\n\t"
    "add.f64 fd2, %9, %11;\n\t"
    "sub.f64 fd21, %8, %10;\n\t"
    "sub.f64 fd22, %9, %11;\n\t"
    "and.b32 r2, r1, 7;\n\t"
    "mul.wide.u32 rd2, r2, 16;\n\t"
    "mov.u64 rd3, %5;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f64 {fd23, fd24}, [rd4];\n\t"
    "mul.f64 fd27, fd23, fd21;\n\t"
    "mul.f64 fd28, fd24, fd22;\n\t"
    "sub.f64 fd3, fd27, fd28;\n\t"
    "mul.f64 fd29, fd23, fd22;\n\t"
    "fma.rn.f64 fd4, fd24, fd21, fd29;\n\t"
    "mov.u32 r8, %tid.y;\n\t"
    "shl.b32 r9, r8, 4;\n\t"
    "shl.b32 r10, r1, 1;\n\t"
    "and.b32 r11, r10, -16;\n\t"
    "add.s32 r3, r11, r9;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r12, r2, 1;\n\t"
    "add.s32 r13, r12, r3;\n\t"
    "shl.b32 r14, r13, 4;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %4;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r15, narrow1;\n\t"
    "}\n\t"
    "add.s32 r16, r15, r14;\n\t"
    "st.shared.v2.f64 [r16], {fd1, fd2};\n\t"
    "st.shared.v2.f64 [r16+16], {fd3, fd4};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r17, r2, r3;\n\t"
    "shl.b32 r18, r17, 4;\n\t"
    "add.s32 r20, r15, r18;\n\t"
    "ld.shared.v2.f64 {fd30, fd31}, [r20];\n\t"
    "ld.shared.v2.f64 {fd34, fd35}, [r20+128];\n\t"
    "add.f64 fd5, fd30, fd34;\n\t"
    "add.f64 fd6, fd31, fd35;\n\t"
    "sub.f64 fd38, fd30, fd34;\n\t"
    "sub.f64 fd39, fd31, fd35;\n\t"
    "and.b32 r4, r1, 6;\n\t"
    "bfe.u32 r21, r1, 1, 2;\n\t"
    "mul.wide.u32 rd5, r21, 16;\n\t"
    "mov.u64 rd6, %6;\n\t"
    "add.s64 rd7, rd6, rd5;\n\t"
    "ld.global.v2.f64 {fd40, fd41}, [rd7];\n\t"
    "mul.f64 fd44, fd40, fd38;\n\t"
    "mul.f64 fd45, fd41, fd39;\n\t"
    "sub.f64 fd7, fd44, fd45;\n\t"
    "mul.f64 fd46, fd40, fd39;\n\t"
    "fma.rn.f64 fd8, fd41, fd38, fd46;\n\t"
    "and.b32 r22, r1, 1;\n\t"
    "add.s32 r5, r3, r22;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r23, r4, 1;\n\t"
    "add.s32 r24, r23, r5;\n\t"
    "shl.b32 r25, r24, 4;\n\t"
    "add.s32 r27, r15, r25;\n\t"
    "st.shared.v2.f64 [r27], {fd5, fd6};\n\t"
    "st.shared.v2.f64 [r27+32], {fd7, fd8};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r28, r4, r5;\n\t"
    "shl.b32 r29, r28, 4;\n\t"
    "add.s32 r31, r15, r29;\n\t"
    "ld.shared.v2.f64 {fd47, fd48}, [r31];\n\t"
    "ld.shared.v2.f64 {fd51, fd52}, [r31+128];\n\t"
    "add.f64 fd9, fd47, fd51;\n\t"
    "add.f64 fd10, fd48, fd52;\n\t"
    "sub.f64 fd55, fd47, fd51;\n\t"
    "sub.f64 fd56, fd48, fd52;\n\t"
    "and.b32 r6, r1, 4;\n\t"
    "bfe.u32 r32, r1, 2, 1;\n\t"
    "mul.wide.u32 rd8, r32, 16;\n\t"
    "mov.u64 rd9, %7;\n\t"
    "add.s64 rd10, rd9, rd8;\n\t"
    "ld.global.v2.f64 {fd57, fd58}, [rd10];\n\t"
    "mul.f64 fd61, fd57, fd55;\n\t"
    "mul.f64 fd62, fd58, fd56;\n\t"
    "sub.f64 fd11, fd61, fd62;\n\t"
    "mul.f64 fd63, fd57, fd56;\n\t"
    "fma.rn.f64 fd12, fd58, fd55, fd63;\n\t"
    "and.b32 r33, r1, 3;\n\t"
    "add.s32 r7, r3, r33;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r34, r6, 1;\n\t"
    "add.s32 r35, r34, r7;\n\t"
    "shl.b32 r36, r35, 4;\n\t"
    "add.s32 r38, r15, r36;\n\t"
    "st.shared.v2.f64 [r38], {fd9, fd10};\n\t"
    "st.shared.v2.f64 [r38+64], {fd11, fd12};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r39, r6, r7;\n\t"
    "shl.b32 r40, r39, 4;\n\t"
    "add.s32 r42, r15, r40;\n\t"
    "ld.shared.v2.f64 {fd64, fd65}, [r42];\n\t"
    "ld.shared.v2.f64 {fd68, fd69}, [r42+128];\n\t"
    "add.f64 %1, fd65, fd69;\n\t"
    "add.f64 %0, fd64, fd68;\n\t"
    "sub.f64 %3, fd65, fd69;\n\t"
    "sub.f64 %2, fd64, fd68;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y): "l"(smem), "l"(lut_dp_2_16), "l"(lut_dp_2_8), "l"(lut_dp_2_4), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<451, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<43>;\n\t"
    ".reg .f64 fd<64>;\n\t"
    ".reg .b64 rd<11>;\n\t"
    "mov.u32 r1, %tid.x;\n\t"
    "add.f64 fd1, %8, %10;\n\t"
    "add.f64 fd2, %9, %11;\n\t"
    "sub.f64 fd27, %8, %10;\n\t"
    "sub.f64 fd28, %9, %11;\n\t"
    "and.b32 r2, r1, 7;\n\t"
    "mul.wide.u32 rd2, r2, 16;\n\t"
    "mov.u64 rd3, %5;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f64 {fd29, fd30}, [rd4];\n\t"
    "mul.f64 fd33, fd29, fd27;\n\t"
    "mul.f64 fd34, fd30, fd28;\n\t"
    "sub.f64 fd3, fd33, fd34;\n\t"
    "mul.f64 fd35, fd29, fd28;\n\t"
    "fma.rn.f64 fd4, fd30, fd27, fd35;\n\t"
    "mov.u32 r14, %tid.y;\n\t"
    "shl.b32 r15, r14, 4;\n\t"
    "shl.b32 r16, r1, 1;\n\t"
    "and.b32 r17, r16, -16;\n\t"
    "add.s32 r3, r17, r15;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r18, r2, 1;\n\t"
    "add.s32 r19, r18, r3;\n\t"
    "shl.b32 r20, r19, 3;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %4;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r21, narrow1;\n\t"
    "}\n\t"
    "add.s32 r4, r21, r20;\n\t"
    "st.shared.f64 [r4], fd1;\n\t"
    "st.shared.f64 [r4+8], fd3;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r22, r2, r3;\n\t"
    "shl.b32 r23, r22, 3;\n\t"
    "add.s32 r5, r21, r23;\n\t"
    "ld.shared.f64 fd5, [r5];\n\t"
    "ld.shared.f64 fd6, [r5+64];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f64 [r4], fd2;\n\t"
    "st.shared.f64 [r4+8], fd4;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f64 fd36, [r5];\n\t"
    "ld.shared.f64 fd37, [r5+64];\n\t"
    "add.f64 fd7, fd5, fd6;\n\t"
    "add.f64 fd8, fd36, fd37;\n\t"
    "sub.f64 fd38, fd5, fd6;\n\t"
    "sub.f64 fd39, fd36, fd37;\n\t"
    "and.b32 r6, r1, 6;\n\t"
    "bfe.u32 r25, r1, 1, 2;\n\t"
    "mul.wide.u32 rd5, r25, 16;\n\t"
    "mov.u64 rd6, %6;\n\t"
    "add.s64 rd7, rd6, rd5;\n\t"
    "ld.global.v2.f64 {fd40, fd41}, [rd7];\n\t"
    "mul.f64 fd44, fd40, fd38;\n\t"
    "mul.f64 fd45, fd41, fd39;\n\t"
    "sub.f64 fd9, fd44, fd45;\n\t"
    "mul.f64 fd46, fd40, fd39;\n\t"
    "fma.rn.f64 fd10, fd41, fd38, fd46;\n\t"
    "and.b32 r26, r1, 1;\n\t"
    "add.s32 r7, r3, r26;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r27, r6, 1;\n\t"
    "add.s32 r28, r27, r7;\n\t"
    "shl.b32 r29, r28, 3;\n\t"
    "add.s32 r8, r21, r29;\n\t"
    "st.shared.f64 [r8], fd7;\n\t"
    "st.shared.f64 [r8+16], fd9;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r31, r6, r7;\n\t"
    "shl.b32 r32, r31, 3;\n\t"
    "add.s32 r9, r21, r32;\n\t"
    "ld.shared.f64 fd11, [r9];\n\t"
    "ld.shared.f64 fd12, [r9+64];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f64 [r8], fd8;\n\t"
    "st.shared.f64 [r8+16], fd10;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f64 fd47, [r9];\n\t"
    "ld.shared.f64 fd48, [r9+64];\n\t"
    "add.f64 fd13, fd11, fd12;\n\t"
    "add.f64 fd14, fd47, fd48;\n\t"
    "sub.f64 fd49, fd11, fd12;\n\t"
    "sub.f64 fd50, fd47, fd48;\n\t"
    "and.b32 r10, r1, 4;\n\t"
    "bfe.u32 r34, r1, 2, 1;\n\t"
    "mul.wide.u32 rd8, r34, 16;\n\t"
    "mov.u64 rd9, %7;\n\t"
    "add.s64 rd10, rd9, rd8;\n\t"
    "ld.global.v2.f64 {fd51, fd52}, [rd10];\n\t"
    "mul.f64 fd55, fd51, fd49;\n\t"
    "mul.f64 fd56, fd52, fd50;\n\t"
    "sub.f64 fd15, fd55, fd56;\n\t"
    "mul.f64 fd57, fd51, fd50;\n\t"
    "fma.rn.f64 fd16, fd52, fd49, fd57;\n\t"
    "and.b32 r35, r1, 3;\n\t"
    "add.s32 r11, r3, r35;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r36, r10, 1;\n\t"
    "add.s32 r37, r36, r11;\n\t"
    "shl.b32 r38, r37, 3;\n\t"
    "add.s32 r12, r21, r38;\n\t"
    "st.shared.f64 [r12], fd13;\n\t"
    "st.shared.f64 [r12+32], fd15;\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r40, r10, r11;\n\t"
    "shl.b32 r41, r40, 3;\n\t"
    "add.s32 r13, r21, r41;\n\t"
    "ld.shared.f64 fd17, [r13];\n\t"
    "ld.shared.f64 fd18, [r13+64];\n\t"
    "barrier.sync 0;\n\t"
    "st.shared.f64 [r12], fd14;\n\t"
    "st.shared.f64 [r12+32], fd16;\n\t"
    "barrier.sync 0;\n\t"
    "ld.shared.f64 fd58, [r13];\n\t"
    "ld.shared.f64 fd59, [r13+64];\n\t"
    "add.f64 %0, fd17, fd18;\n\t"
    "add.f64 %1, fd58, fd59;\n\t"
    "sub.f64 %2, fd17, fd18;\n\t"
    "sub.f64 %3, fd58, fd59;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y): "l"(smem), "l"(lut_dp_2_16), "l"(lut_dp_2_8), "l"(lut_dp_2_4), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y));
};




template<> __forceinline__ __device__ void cufftdx_private_function<452, double, 1>(cufftdx::detail::complex<double> *rmem, void *smem){

asm volatile ("{\n\t"
    ".reg .b32 r<17>;\n\t"
    ".reg .f64 fd<206>;\n\t"
    ".reg .b64 rd<6>;\n\t"
    "mov.u32 r3, %tid.y;\n\t"
    "shl.b32 r4, r3, 4;\n\t"
    "mov.u32 r5, %tid.x;\n\t"
    "add.f64 fd49, %18, %28;\n\t"
    "add.f64 fd50, %19, %30;\n\t"
    "sub.f64 fd51, %18, %28;\n\t"
    "sub.f64 fd52, %19, %30;\n\t"
    "add.f64 fd53, %23, %34;\n\t"
    "add.f64 fd54, %25, %35;\n\t"
    "sub.f64 fd55, %23, %34;\n\t"
    "sub.f64 fd56, %25, %35;\n\t"
    "add.f64 fd57, fd49, fd53;\n\t"
    "add.f64 fd58, fd50, fd54;\n\t"
    "sub.f64 fd59, fd49, fd53;\n\t"
    "sub.f64 fd60, fd50, fd54;\n\t"
    "add.f64 fd61, fd51, fd56;\n\t"
    "sub.f64 fd62, fd52, fd55;\n\t"
    "sub.f64 fd63, fd51, fd56;\n\t"
    "add.f64 fd64, fd52, fd55;\n\t"
    "add.f64 fd65, %20, %31;\n\t"
    "add.f64 fd66, %22, %33;\n\t"
    "sub.f64 fd67, %20, %31;\n\t"
    "sub.f64 fd68, %22, %33;\n\t"
    "add.f64 fd69, %26, %36;\n\t"
    "add.f64 fd70, %27, %37;\n\t"
    "sub.f64 fd71, %26, %36;\n\t"
    "sub.f64 fd72, %27, %37;\n\t"
    "add.f64 fd73, fd65, fd69;\n\t"
    "add.f64 fd74, fd66, fd70;\n\t"
    "sub.f64 fd75, fd65, fd69;\n\t"
    "sub.f64 fd76, fd66, fd70;\n\t"
    "add.f64 fd77, fd67, fd72;\n\t"
    "sub.f64 fd78, fd68, fd71;\n\t"
    "sub.f64 fd79, fd67, fd72;\n\t"
    "add.f64 fd80, fd68, fd71;\n\t"
    "mul.f64 fd81, fd77, 0d3FE6A09E667F3BCD;\n\t"
    "mul.f64 fd82, fd78, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd83, fd81, fd82;\n\t"
    "mul.f64 fd84, fd78, 0d3FE6A09E667F3BCD;\n\t"
    "fma.rn.f64 fd85, fd77, 0dBFE6A09E667F3BCD, fd84;\n\t"
    "mul.f64 fd86, fd79, 0dBFE6A09E667F3BCD;\n\t"
    "mul.f64 fd87, fd80, 0dBFE6A09E667F3BCD;\n\t"
    "sub.f64 fd88, fd86, fd87;\n\t"
    "add.f64 fd89, fd86, fd87;\n\t"
    "add.f64 fd1, fd57, fd73;\n\t"
    "add.f64 fd2, fd58, fd74;\n\t"
    "sub.f64 fd90, fd57, fd73;\n\t"
    "sub.f64 fd91, fd58, fd74;\n\t"
    "add.f64 fd92, fd61, fd83;\n\t"
    "add.f64 fd93, fd62, fd85;\n\t"
    "sub.f64 fd94, fd61, fd83;\n\t"
    "sub.f64 fd95, fd62, fd85;\n\t"
    "add.f64 fd96, fd59, fd76;\n\t"
    "sub.f64 fd97, fd60, fd75;\n\t"
    "sub.f64 fd98, fd59, fd76;\n\t"
    "add.f64 fd99, fd60, fd75;\n\t"
    "add.f64 fd100, fd63, fd88;\n\t"
    "add.f64 fd101, fd64, fd89;\n\t"
    "sub.f64 fd102, fd63, fd88;\n\t"
    "sub.f64 fd103, fd64, fd89;\n\t"
    "and.b32 r1, r5, 1;\n\t"
    "mul.wide.u32 rd2, r1, 16;\n\t"
    "mov.u64 rd3, %17;\n\t"
    "add.s64 rd4, rd3, rd2;\n\t"
    "ld.global.v2.f64 {fd104, fd105}, [rd4];\n\t"
    "mul.f64 fd108, fd104, fd92;\n\t"
    "mul.f64 fd109, fd105, fd93;\n\t"
    "sub.f64 fd3, fd108, fd109;\n\t"
    "mul.f64 fd110, fd104, fd93;\n\t"
    "fma.rn.f64 fd4, fd105, fd92, fd110;\n\t"
    "mul.f64 fd111, fd104, fd104;\n\t"
    "mul.f64 fd112, fd105, fd105;\n\t"
    "sub.f64 fd113, fd111, fd112;\n\t"
    "mul.f64 fd114, fd105, fd104;\n\t"
    "fma.rn.f64 fd115, fd105, fd104, fd114;\n\t"
    "mul.f64 fd116, fd113, fd96;\n\t"
    "mul.f64 fd117, fd115, fd97;\n\t"
    "sub.f64 fd5, fd116, fd117;\n\t"
    "mul.f64 fd118, fd113, fd97;\n\t"
    "fma.rn.f64 fd6, fd115, fd96, fd118;\n\t"
    "mul.f64 fd119, fd104, fd113;\n\t"
    "mul.f64 fd120, fd105, fd115;\n\t"
    "sub.f64 fd121, fd119, fd120;\n\t"
    "mul.f64 fd122, fd104, fd115;\n\t"
    "fma.rn.f64 fd123, fd105, fd113, fd122;\n\t"
    "mul.f64 fd124, fd121, fd100;\n\t"
    "mul.f64 fd125, fd123, fd101;\n\t"
    "sub.f64 fd7, fd124, fd125;\n\t"
    "mul.f64 fd126, fd121, fd101;\n\t"
    "fma.rn.f64 fd8, fd123, fd100, fd126;\n\t"
    "mul.f64 fd127, fd104, fd121;\n\t"
    "mul.f64 fd128, fd105, fd123;\n\t"
    "sub.f64 fd129, fd127, fd128;\n\t"
    "mul.f64 fd130, fd104, fd123;\n\t"
    "fma.rn.f64 fd131, fd105, fd121, fd130;\n\t"
    "mul.f64 fd132, fd129, fd90;\n\t"
    "mul.f64 fd133, fd131, fd91;\n\t"
    "sub.f64 fd9, fd132, fd133;\n\t"
    "mul.f64 fd134, fd129, fd91;\n\t"
    "fma.rn.f64 fd10, fd131, fd90, fd134;\n\t"
    "ld.global.v2.f64 {fd135, fd136}, [rd4+32];\n\t"
    "mul.f64 fd139, fd135, fd94;\n\t"
    "mul.f64 fd140, fd136, fd95;\n\t"
    "sub.f64 fd11, fd139, fd140;\n\t"
    "mul.f64 fd141, fd135, fd95;\n\t"
    "fma.rn.f64 fd12, fd136, fd94, fd141;\n\t"
    "mul.f64 fd142, fd104, fd135;\n\t"
    "mul.f64 fd143, fd105, fd136;\n\t"
    "sub.f64 fd144, fd142, fd143;\n\t"
    "mul.f64 fd145, fd104, fd136;\n\t"
    "fma.rn.f64 fd146, fd105, fd135, fd145;\n\t"
    "mul.f64 fd147, fd144, fd98;\n\t"
    "mul.f64 fd148, fd146, fd99;\n\t"
    "sub.f64 fd13, fd147, fd148;\n\t"
    "mul.f64 fd149, fd144, fd99;\n\t"
    "fma.rn.f64 fd14, fd146, fd98, fd149;\n\t"
    "mul.f64 fd150, fd104, fd144;\n\t"
    "mul.f64 fd151, fd105, fd146;\n\t"
    "sub.f64 fd152, fd150, fd151;\n\t"
    "mul.f64 fd153, fd104, fd146;\n\t"
    "fma.rn.f64 fd154, fd105, fd144, fd153;\n\t"
    "mul.f64 fd155, fd152, fd102;\n\t"
    "mul.f64 fd156, fd154, fd103;\n\t"
    "sub.f64 fd15, fd155, fd156;\n\t"
    "mul.f64 fd157, fd152, fd103;\n\t"
    "fma.rn.f64 fd16, fd154, fd102, fd157;\n\t"
    "shl.b32 r6, r5, 3;\n\t"
    "and.b32 r7, r6, -16;\n\t"
    "add.s32 r2, r7, r4;\n\t"
    "barrier.sync 0;\n\t"
    "shl.b32 r8, r1, 3;\n\t"
    "add.s32 r9, r8, r2;\n\t"
    "shl.b32 r10, r9, 4;\n\t"
    "{\n\t"
    ".reg .u64 wide1;\n\t"
    ".reg .u32 narrow1;\n\t"
    "mov.u64 wide1, %16;\n\t"
    "cvt.u32.u64 narrow1, wide1;\n\t"
    "cvta.to.shared.u32 r11, narrow1;\n\t"
    "}\n\t"
    "add.s32 r12, r11, r10;\n\t"
    "st.shared.v2.f64 [r12], {fd1, fd2};\n\t"
    "st.shared.v2.f64 [r12+16], {fd3, fd4};\n\t"
    "st.shared.v2.f64 [r12+32], {fd5, fd6};\n\t"
    "st.shared.v2.f64 [r12+48], {fd7, fd8};\n\t"
    "st.shared.v2.f64 [r12+64], {fd9, fd10};\n\t"
    "st.shared.v2.f64 [r12+80], {fd11, fd12};\n\t"
    "st.shared.v2.f64 [r12+96], {fd13, fd14};\n\t"
    "st.shared.v2.f64 [r12+112], {fd15, fd16};\n\t"
    "barrier.sync 0;\n\t"
    "add.s32 r13, r1, r2;\n\t"
    "shl.b32 r14, r13, 4;\n\t"
    "add.s32 r16, r11, r14;\n\t"
    "ld.shared.v2.f64 {fd158, fd159}, [r16];\n\t"
    "ld.shared.v2.f64 {fd162, fd163}, [r16+32];\n\t"
    "ld.shared.v2.f64 {fd166, fd167}, [r16+64];\n\t"
    "ld.shared.v2.f64 {fd170, fd171}, [r16+96];\n\t"
    "ld.shared.v2.f64 {fd174, fd175}, [r16+128];\n\t"
    "ld.shared.v2.f64 {fd178, fd179}, [r16+160];\n\t"
    "ld.shared.v2.f64 {fd182, fd183}, [r16+192];\n\t"
    "ld.shared.v2.f64 {fd186, fd187}, [r16+224];\n\t"
    "add.f64 %1, fd159, fd175;\n\t"
    "add.f64 %0, fd158, fd174;\n\t"
    "add.f64 %3, fd163, fd179;\n\t"
    "add.f64 %2, fd162, fd178;\n\t"
    "add.f64 %5, fd167, fd183;\n\t"
    "add.f64 %4, fd166, fd182;\n\t"
    "add.f64 %7, fd171, fd187;\n\t"
    "add.f64 %6, fd170, fd186;\n\t"
    "sub.f64 %9, fd159, fd175;\n\t"
    "sub.f64 %8, fd158, fd174;\n\t"
    "sub.f64 %11, fd163, fd179;\n\t"
    "sub.f64 %10, fd162, fd178;\n\t"
    "sub.f64 %13, fd167, fd183;\n\t"
    "sub.f64 %12, fd166, fd182;\n\t"
    "sub.f64 %15, fd171, fd187;\n\t"
    "sub.f64 %14, fd170, fd186;\n\t"
    "}"
     : "=d"(rmem[0].x), "=d"(rmem[0].y), "=d"(rmem[1].x), "=d"(rmem[1].y), "=d"(rmem[2].x), "=d"(rmem[2].y), "=d"(rmem[3].x), "=d"(rmem[3].y), "=d"(rmem[4].x), "=d"(rmem[4].y), "=d"(rmem[5].x), "=d"(rmem[5].y), "=d"(rmem[6].x), "=d"(rmem[6].y), "=d"(rmem[7].x), "=d"(rmem[7].y): "l"(smem), "l"(lut_dp_8_16), "d"(rmem[0].x), "d"(rmem[0].y), "d"(rmem[1].x), "d"(rmem[1].y), "d"(rmem[1].y), "d"(rmem[2].x), "d"(rmem[2].y), "d"(rmem[2].y), "d"(rmem[3].x), "d"(rmem[3].y), "d"(rmem[4].x), "d"(rmem[4].y), "d"(rmem[4].y), "d"(rmem[5].x), "d"(rmem[5].y), "d"(rmem[5].y), "d"(rmem[6].x), "d"(rmem[6].y), "d"(rmem[7].x), "d"(rmem[7].y));
};


#endif
